#!/usr/bin/env bash

read_csv_array() {
    local -n csv_var=$1
    local path=$2
    local row=1
    IFS=$'\n'
    for line in `cat $path`
    do
        local col=1
        for val in `echo $line | tr , "\n"`
        do
            csv_var[$row,$col]=$val
            let "col++"
        done
        let "row++"
    done
}

array_test() {
    [[ $# -ne 1 ]] && return 2
    var=$1
    regex="^declare -[aA] ${var}(=|$)"
    [[ $(declare -p "$var" 2> /dev/null) =~ $regex ]] && return 0
}

get_array_shape() {
    local -n csv_var_shape=$1
    echo "${!csv_var_shape[@]}" | tr " " "\n" | sort -n | tail -n1
}
get_array_col() {
    local -n csv_var_col=$1
    get_array_shape csv_var_col | cut -d"," -f2
}
get_array_row() {
    local -n csv_var_row=$1
    get_array_shape csv_var_row | cut -d"," -f1
}

extract_value() {
    if [[ -v $1 ]]; then
        local -n extract=$1
        echo $extract
    else
        echo $1
    fi
}

print_all() {
    if array_test $1; then
        local -n csv_var_print=$1
        local rows=$(get_array_row csv_var_print)
        local columns=$(get_array_col csv_var_print)
        for ((i=1;i<=rows;i++))
        do
            for ((j=1;j<=columns;j++))
            do
                echo -ne ${csv_var_print[$i,$j]}
                if [[ $j -lt $columns ]]; then
                    echo -ne ","
                fi
            done
            echo -ne "\n"
        done
    else
        echo $(extract_value $1)
    fi
}

set_val_csv() {
    local -n csv_var_set=$1
    local row=$(extract_value $2)
    local col=$(extract_value $3)
    local val=$(extract_value $4)

    let "row++"
    let "col++"

    csv_var_set[$row,$col]=$val
}

get_val_csv_simple() {
    local -n csv_var_get=$1
    local row=$(extract_value $2)
    local col=$(extract_value $3)

    if [[ $row == "@" && $col = "@" ]]; then
        print_all $1
    elif [[ $row == "@" && $col != "@" ]]; then
        echo "Not implemented yet."
    elif [[ $row != "@" && $col == "@" ]]; then
        echo "Not implemented yet."
    else
        let "row++"
        let "col++"
        echo ${csv_var_get[$row,$col]}
    fi
}

add_row_csv() {
    local -n csv_var_add_row=$1
    local rows=$(get_array_row csv_var_add_row)
    local columns=$(get_array_col csv_var_add_row)

    let "rows++"
    for ((i=1;i<=columns;i++))
    do
        csv_var_add_row[$rows,$i]=""
    done
}

add_col_csv() {
    local -n csv_var_add_col=$1
    local rows=$(get_array_row csv_var_add_col)
    local columns=$(get_array_col csv_var_add_col)

    let "columns++"
    csv_var_add_col[1,$columns]="NewCol"
    for ((i=2;i<=rows;i++))
    do
        csv_var_add_col[$i,$columns]=""
    done
}

rename_csv() {
    local -n csv_var_rename=$1
    local oldname=$(extract_value $2)
    local newname=$(extract_value $3)

    local columns=$(get_array_col csv_var_rename)
    local title_row=1
    for ((i=1;i<=columns;i++))
    do
        if [[ ${csv_var_rename[$title_row,$i]} == $oldname ]]; then
            csv_var_rename[$title_row,$i]=$newname
            return
        fi
    done
}

export_json_csv() {
    local -n csv_var_export=$1
    local path_export=$(extract_value $2)
    local rows=$(get_array_row csv_var_export)
    local title_row=1
    local columns=$(get_array_col csv_var_export)
    local generated="{"
    local re_num_float='^[+-]?[0-9]+([.][0-9]+)$'
    local re_num_int='^[+-]?[0-9]+$'

    for ((i=1;i<=columns;i++))
    do
        generated="${generated}\"${csv_var_export[$title_row,$i]}\":{"
        counter=0
        for ((j=2;j<=rows;j++))
        do
            if [[ counter -gt 0 ]]; then
                generated="${generated},"
            fi
            generated="${generated}\"${counter}\":"
            if [[ ${csv_var_export[$j,$i]} =~ $re_num_float ]]; then
                generated="${generated}${csv_var_export[$j,$i]}"
            elif [[ ${csv_var_export[$j,$i]} =~ $re_num_int ]]; then
                generated="${generated}${csv_var_export[$j,$i]}.0"
            elif [[ ${csv_var_export[$j,$i]} == "" ]]; then
                generated="${generated}null"
            else
                generated="${generated}\"${csv_var_export[$j,$i]}\""
            fi
            let "counter++"
        done
        generated="${generated}}"
        if [[ i -lt columns ]]; then
            generated="${generated},"
        fi
    done

    generated="${generated}}"
    echo ${path_export}
    echo ${generated} > $path_export
}

concat_two_csv() {
    local -n csv_concat_1=$1
    local -n csv_concat_2_orig=$2
    declare -A csv_concat_2

    for key in "${!csv_concat_2_orig[@]}"; do
        csv_concat_2[$key]=${csv_concat_2_orig[$key]}
    done

    local rows_1=$(get_array_row csv_concat_1)
    local columns_1=$(get_array_col csv_concat_1)
    local rows_2=$(get_array_row csv_concat_2)
    local columns_2=$(get_array_col csv_concat_2)

    if [[ rows_1 -gt rows_2 ]]; then
        let "missing_rows = rows_1 - rows_2"
        for ((k=0;k<missing_rows;k++))
        do
            add_row_csv csv_concat_2
        done
    else
        let "missing_rows = rows_2 - rows_1"
        for ((k=0;k<missing_rows;k++))
        do
            add_row_csv csv_concat_1
        done
    fi
    for ((k=0;k<columns_2;k++))
    do
        add_col_csv csv_concat_1
    done

    for ((i=1;i<=rows_2;i++))
    do
        for ((j=1;j<=columns_2;j++))
        do
            let "col_offset = columns_2 + j"
            csv_concat_1[$i,$col_offset]=${csv_concat_2[$i,$j]}
        done
    done
}

count_csv() {
    local -n csv_count=$1
    local rows=$(get_array_row csv_count)
    local columns=$(get_array_col csv_count)
    let "total = rows * columns"
    echo $total
}

