package com.agicquel.csvs.generator

import com.agicquel.csvs.csvs.AddExpr
import com.agicquel.csvs.csvs.ApplyCommand
import com.agicquel.csvs.csvs.AtomicExpr
import com.agicquel.csvs.csvs.Block
import com.agicquel.csvs.csvs.BoolConstant
import com.agicquel.csvs.csvs.Command
import com.agicquel.csvs.csvs.ComparaisonExpr
import com.agicquel.csvs.csvs.ControlCommand
import com.agicquel.csvs.csvs.CountExpr
import com.agicquel.csvs.csvs.CreateCommand
import com.agicquel.csvs.csvs.CsvCommand
import com.agicquel.csvs.csvs.DeleteCommand
import com.agicquel.csvs.csvs.EqualityExpr
import com.agicquel.csvs.csvs.ExportCommand
import com.agicquel.csvs.csvs.Expression
import com.agicquel.csvs.csvs.FieldSelect
import com.agicquel.csvs.csvs.IfCommand
import com.agicquel.csvs.csvs.IntConstant
import com.agicquel.csvs.csvs.LoadCommand
import com.agicquel.csvs.csvs.Model
import com.agicquel.csvs.csvs.MulOrDivExpr
import com.agicquel.csvs.csvs.NotExpr
import com.agicquel.csvs.csvs.OrExpr
import com.agicquel.csvs.csvs.PlusOrMinusExpr
import com.agicquel.csvs.csvs.PrimaryExpr
import com.agicquel.csvs.csvs.PrintCommand
import com.agicquel.csvs.csvs.Selector
import com.agicquel.csvs.csvs.SetCommand
import com.agicquel.csvs.csvs.StoreCommand
import com.agicquel.csvs.csvs.StringConstant
import com.agicquel.csvs.csvs.WhileCommand
import org.eclipse.emf.ecore.resource.Resource
import com.agicquel.csvs.csvs.CsvsExpr
import com.agicquel.csvs.csvs.VariableConstant
import com.agicquel.csvs.csvs.AddCommand
import com.agicquel.csvs.csvs.RenameCommand
import com.agicquel.csvs.csvs.LastExpr

class CSVSGeneratorPython {
	
	def String compileIR(Resource resource) {
		var pythonCode = "import pandas as pd\n";
		pythonCode += "pd.options.mode.chained_assignment = None\n"
		pythonCode += "\n"
		pythonCode += "def len_csvs(obj):\r\n\tif hasattr(obj, \'__len__\'):\r\n\t\treturn len(obj)\r\n\telse:\r\n\t\treturn 1\n"
		pythonCode += "\n"
		for(model : resource.allContents.toIterable.filter(Model)) {
			for(command : model.commands) {
				pythonCode += command.compileCommand() + "\n"	
			}
		}
		
		return pythonCode;
	}
	
	private def dispatch String compileCommand(CsvCommand csvCommand) {
		return csvCommand.compileCommand()
	}
	
	private def dispatch String compileCommand(ControlCommand controlCommand) {
		return controlCommand.compileCommand()
	}
	
	private def dispatch String compileCommand(LoadCommand loadCommand) {
		loadCommand.^var + " = pd.read_csv('" + loadCommand.path + "')"
	}
	
	private def dispatch String compileCommand(StoreCommand storeCommand) {
		storeCommand.^var + ".to_csv(r'" + storeCommand.path + "', index=False)"
	}
	
	private def dispatch String compileCommand(CreateCommand createCommand) {
		createCommand.^var + " = pd.DataFrame()"
	}
	
	private def dispatch String compileCommand(SetCommand setCommand) {
		var ret = setCommand.^var.compileExpr()
		ret += " = " + setCommand.expression.compileExpr()
		return ret
	}
	
	private def dispatch String compileCommand(PrintCommand printCommand) {
		"print(str(" + printCommand.expression.compileExpr() + "))"
	}
	
	private def dispatch String compileCommand(ExportCommand exportCommand) {
		exportCommand.^var + ".to_json(r'" + exportCommand.path + "')"
	}
	
	private def dispatch String compileCommand(DeleteCommand deleteCommand) {
		"del " + deleteCommand.expression.compileExpr()
	}
	
	private def dispatch String compileCommand(AddCommand addCommand) {
		if(addCommand.op.equals("row")) {
			return addCommand.expression.compileExpr() + ".iloc[-1] = None "
		}
		else if(addCommand.op.equals("col")) {
			return addCommand.expression.compileExpr() + "[str(len(" + addCommand.expression.compileExpr() + ".columns)+1)] = None"
		}
		else {
			throw new Exception("Wrong add command")
		}
	}
	
	private def dispatch String compileCommand(RenameCommand renameCommand) {
		renameCommand.expr.compileExpr() + ".rename(columns = {" + renameCommand.oldname.compileExpr() 
			+ ":" + renameCommand.newname.compileExpr() + "}, inplace = True)"
		
	}
		
	private def dispatch String compileCommand(ApplyCommand applyCommand) {
		var name = applyCommand.selection.compileExpr()
		var ret = ""
		
		
		 
		ret += "for csv_row_index in " + name + ".index:\n"
		ret += "\tfor csv_col_name in " + name + ".columns:\n"
		ret += "\t\t"
		
		if(applyCommand.^if !== null) {
			ret += applyCommand.^if.varName + " = " + name + "[csv_col_name][csv_row_index]\n"
			ret += "\t\t"	
			ret += "if not (" + applyCommand.^if.expr.compileExpr() + "):\n"
			ret += "\t\t\t"
			ret += "continue\n"
			ret += "\t\t"
		}
		
		ret += applyCommand.exec.varName + " = " + name + "[csv_col_name][csv_row_index]\n"
		ret += "\t\t"
		// NOTE : to type checking, so we assume that the user know what he is doing
		ret += applyCommand.exec.varName + " = " + applyCommand.exec.expr.compileExpr() + "\n"
		ret += "\t\t"
		ret += name + "[csv_col_name][csv_row_index] = " + applyCommand.exec.varName + "\n" 
		
		return ret
	}

	
	private def String compileBlock(Block block) {
		var blockString = ""
		for(Command com : block.commands) {
			var comString = com.compileCommand()
			for(String s : comString.toString.split(System.getProperty("line.separator"))) {
				blockString += "\t" + s + "\n";
			}
		}
		return blockString
	}
	
	
	private def dispatch String compileCommand(WhileCommand whileCommand) {
		"while " + whileCommand.cond.compileExpr() + ":\n" + whileCommand.body.compileBlock()
	}
	
	private def dispatch String compileCommand(IfCommand ifCommand) {
		"if " + ifCommand.cond.compileExpr() + ":\n" + ifCommand.thenBody.compileBlock() 
			+ (ifCommand.elseBody === null ? "" : ("\nelse:\n" + ifCommand.elseBody.compileBlock()))
	}

	
	private	def dispatch String compileExpr(Expression expression) {
		expression.compileExpr()
	}
	
	private	def dispatch String compileExpr(OrExpr orExpr) {
		var code = orExpr.left.compileExpr()
		for(AddExpr right : orExpr.right) {
			code += " or " + right.compileExpr()
		}
		return code
	}
	
	private	def dispatch String compileExpr(AddExpr addExpr) {
		var code = addExpr.left.compileExpr()
		for(EqualityExpr right : addExpr.right) {
			code += " and " + right.compileExpr()
		}
		return code
	}
	
	private	def dispatch String compileExpr(EqualityExpr equalityExpr) {
		equalityExpr.left.compileExpr() + (equalityExpr.right === null ? "" : (" " + equalityExpr.op + " " + equalityExpr.right.compileExpr()))
	}
	
	private	def dispatch String compileExpr(ComparaisonExpr comparaisonExpr) {
		comparaisonExpr.left.compileExpr() + (comparaisonExpr.right === null ? "" : (" " + comparaisonExpr.op + " " + comparaisonExpr.right.compileExpr()))
	}
	
	private	def dispatch String compileExpr(PlusOrMinusExpr comparaisonExpr) {
		var code = comparaisonExpr.left.compileExpr()
		for(i : 0 ..< comparaisonExpr.right.size) {
			code += " " + comparaisonExpr.op.get(i) + " " + comparaisonExpr.right.get(i).compileExpr()
		}
		return code
	}
	
	private	def dispatch String compileExpr(MulOrDivExpr mulOrDivExpr) {
		var code = mulOrDivExpr.left.compileExpr()
		for(i : 0 ..< mulOrDivExpr.right.size) {
			code += " " + mulOrDivExpr.op.get(i) + " " + mulOrDivExpr.right.get(i).compileExpr()
		}
		return code
	}
	
	private	def dispatch String compileExpr(PrimaryExpr primaryExpr) {
		primaryExpr.compileExpr()
	}
	
	private	def dispatch String compileExpr(NotExpr notExpr) {
		"not " + notExpr.expr.compileExpr()
	}
	
	private	def dispatch String compileExpr(AtomicExpr atomicExpr) {
		atomicExpr.compileExpr()
	}
	
	private	def dispatch String compileExpr(IntConstant intConstant) {
		intConstant.value.toString
	}
	
	private	def dispatch String compileExpr(StringConstant stringConstant) {
		"\"" + stringConstant.value + "\""
	}
	
	private	def dispatch String compileExpr(BoolConstant boolConstant) {
		boolConstant.value.substring(0, 1).toUpperCase() + boolConstant.value.substring(1)
	}
	
	private	def dispatch String compileExpr(VariableConstant variableConstant) {
		variableConstant.value.toString
	}
	
	private	def dispatch String compileExpr(CsvsExpr csvsExpr) {
		print("csv expr")
		csvsExpr.compileExpr()
	}
	
	private	def dispatch String compileExpr(CountExpr countExpr) {
		"len_csvs(" + countExpr.expression.compileExpr() + ")" 
	}
	
	private	def dispatch String compileExpr(Selector cellSelect) {
		var ret = cellSelect.^var
		var row = cellSelect.expressionRow !== null ? cellSelect.expressionRow.compileExpr() : null
		var col = cellSelect.expressionCol !== null ? cellSelect.expressionCol.compileExpr() : null
		
		if(row === null && col === null) {
			throw new Exception("Wrong cell selection.")
		}
		else if (row !== null && col === null) {
			ret += ".loc[" + row + "]"
		}
		else if (col !== null) {
			// NOTE : no type checking so we assume that the variable contains string
			if(cellSelect.expressionCol instanceof StringConstant || cellSelect.expressionCol instanceof VariableConstant) {
				ret += "[" + col + "]"
			}
			else if(cellSelect.expressionCol instanceof IntConstant) {
				ret += "[" +  cellSelect.^var + ".columns[" + col + "]]"
			}
			else {
				throw new Exception("Wrong column type.")
			}
			
			if(row !== null) {
				ret += "[" + row + "]"
			}
		}
	
		return ret
	}
	
	private	def dispatch String compileExpr(FieldSelect fieldSelect) {
		fieldSelect.^var + ".columns[" + fieldSelect.expression.compileExpr() + "]"
	}
	
	private def dispatch String compileExpr(LastExpr lastExpr) {
		if(lastExpr.op.equals("row")) {
			return "(len_csvs(" + lastExpr.expression.compileExpr() + ".index) - 1)"
		}
		else if(lastExpr.op.equals("col")) {
			return "(len_csvs(" + lastExpr.expression.compileExpr()+ ".columns) - 1)"
		}
		else {
			throw new Exception("Wrong add command")
		}
	}
	
}