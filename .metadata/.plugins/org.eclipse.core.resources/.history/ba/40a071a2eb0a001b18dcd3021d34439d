grammar com.agicquel.csvs.CSVs with org.eclipse.xtext.common.Terminals

generate csvs "http://www.agicquel.com/csvs/CSVs"

///////// PROGRAM //////////
Program: LC commands+=Command* LC;
LC : WS?;


///////// COMMANDS /////////
Command: (CsvCommand LC ';') | ControlCommand | {Command} CommentCommand;

Block: '{' LC Program LC '}';
ControlCommand: WhileCommand | IfCommand;
WhileCommand: 'while' LC '(' LC cond=Expression LC ')' LC body=Block;
IfCommand: 'if' LC '(' LC cond=Expression LC ')' LC thenBody=Block LC ('else' LC elseBody=Block LC)?;

CsvCommand: LoadCommand | StoreCommand | CreateCommand | SetCommand | PrintCommand | ExportCommand | DeleteCommand | AddCommand;
LoadCommand: 'load' LC var=ID LC STRING;
StoreCommand: 'store' LC var=ID LC STRING;
CreateCommand: 'create' LC var=ID;
SetCommand: 'set' LC var=Expression LC expression=Expression;
PrintCommand: 'print' LC expression=Expression;
ExportCommand: 'export' LC expression=Expression;
DeleteCommand: 'delete' LC expression=Expression;
AddCommand: 'add' LC op=('row' | 'col') LC expression=Expression;

CommentCommand: ML_COMMENT | SL_COMMENT;


/////// EXPRESSIONS ////////
Expression: OrExpr;
VariableExpr: term=ID;
Selector: RowSelect | ColSelect | CellSelect | FieldSelect;
RowSelect: 'row' LC var=ID LC '(' LC expression=Expression LC ')';
ColSelect: 'col' LC var=ID LC '(' LC expression=Expression LC ')';
CellSelect: 'cell' LC var=ID LC '(' LC expressionRow=Expression LC ',' LC expressionCol=Expression LC ')';
FieldSelect: 'field' LC var=ID LC '(' LC expression=Expression LC ')';
CountExpr: 'count' LC var=ID LC '(' LC expression=Expression LC ')';



/*
 * CREDIT : Lorenzo Bettini
 * URL : https://github.com/LorenzoBettini/packtpub-xtext-book-2nd-examples/blob/master/org.example.expressions.parent/org.example.expressions/src/org/example/expressions/Expressions.xtext 
 */

OrExpr: left=AddExpr LC ('||' LC right+=AddExpr)*;
AddExpr: left=EqualityExpr LC ('&&' LC right+=EqualityExpr)*;
EqualityExpr: left=ComparaisonExpr LC (op+=("==" | "!=") LC right+=ComparaisonExpr)*;
ComparaisonExpr: left=PlusOrMinusExpr LC (op+=(">=" | "<=" | ">" | "<") LC right+=PlusOrMinusExpr)*;
PlusOrMinusExpr: left=MulOrDivExpr LC (op+=("+" | "-") LC right+=MulOrDivExpr)*;
MulOrDivExpr: left=PrimaryExpr LC (op+=('*' | '/') LC right+=PrimaryExpr)*;
PrimaryExpr: ('(' LC Expression LC ')') | NotExpr | AtomicExpr | Selector | CountExpr;
NotExpr: '!' LC expr= PrimaryExpr;
AtomicExpr returns Expression:
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	{BoolConstant} value=('true' | 'false') |
	VariableExpr
;
