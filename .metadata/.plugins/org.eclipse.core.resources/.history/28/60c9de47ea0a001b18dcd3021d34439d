grammar com.agicquel.csvs.CSVs with org.eclipse.xtext.common.Terminals

generate csvs "http://www.agicquel.com/csvs/CSVs"

///////// PROGRAM //////////
Program: LC commands+=Command* LC;
LC : WS?;


///////// COMMANDS /////////
Command: (CsvCommand LC ';') | ControlCommand | {Command} CommentCommand;

Block: '{' LC Program LC '}';
ControlCommand: WhileCommand | IfCommand;
WhileCommand: 'while' LC '(' LC cond=Expression LC ')' LC body=Block;
IfCommand: 'if' LC '(' LC cond=Expression LC ')' LC thenBody=Block LC ('else' LC elseBody=Block LC)?;

CsvCommand: LoadCommand | StoreCommand | CreateCommand | SetCommand | PrintCommand | ExportCommand | DeleteCommand | AddCommand;
LoadCommand: 'load' LC var=ID LC STRING;
StoreCommand: 'store' LC var=ID LC STRING;
CreateCommand: 'create' LC var=ID;
SetCommand: 'set' LC var=Expression LC expression=Expression;
PrintCommand: 'print' LC expression=Expression;
ExportCommand: 'export' LC expression=Expression;
DeleteCommand: 'delete' LC expression=Expression;
AddCommand: 'add' LC op=('row' | 'col') LC expression=Expression;

CommentCommand: ML_COMMENT | SL_COMMENT;


/////// EXPRESSIONS ////////
Expression: Or | ;
VariableExpr: term=ID;
Selector: RowSelect | ColSelect | CellSelect | FieldSelect;
RowSelect: 'row' LC var=ID LC '(' LC expression=Expression LC ')';
ColSelect: 'col' LC var=ID LC '(' LC expression=Expression LC ')';
CellSelect: 'cell' LC var=ID LC '(' LC expressionRow=Expression LC ',' LC expressionCol=Expression LC ')';
FieldSelect: 'field' LC var=ID LC '(' LC expression=Expression LC ')';
CountExpr: 'count' LC var=ID LC '(' LC expression=Expression LC ')';



/*
 * CREDIT : Lorenzo Bettini
 * URL : https://github.com/LorenzoBettini/packtpub-xtext-book-2nd-examples/blob/master/org.example.expressions.parent/org.example.expressions/src/org/example/expressions/Expressions.xtext 
 */

Or returns Expression:
	And (
		{Or.left=current} LC "||" LC right=And
	)*;

And returns Expression:
	Equality (
		{And.left=current} LC "&&" LC right=Equality
	)*;

Equality returns Expression:
	Comparison (
		{Equality.left=current} LC op=("==" | "!=") LC
		right=Comparison
	)*;

Comparison returns Expression:
	PlusOrMinus (
		{Comparison.left=current} LC op=(">=" | "<=" | ">" | "<") LC
		right=PlusOrMinus
	)*;

PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} LC op=("+" | "-")) LC
		right=MulOrDiv
	)*;

MulOrDiv returns Expression:
	Primary (
		({MulOrDiv.left=current} LC op=('*' | '/')) LC
		right=Primary
	)*;

Primary returns Expression:
	'(' LC Expression LC ')' |
	{Not} "!" expression=Primary |
	Atomic;

Atomic returns Expression:
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	{BoolConstant} value=('true' | 'false') |
	VariableExpr |
	Selector | CountExpr
;
