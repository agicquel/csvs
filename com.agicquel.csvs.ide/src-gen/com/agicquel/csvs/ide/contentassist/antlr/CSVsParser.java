/*
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.ide.contentassist.antlr;

import com.agicquel.csvs.ide.contentassist.antlr.internal.InternalCSVsParser;
import com.agicquel.csvs.services.CSVsGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CSVsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CSVsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CSVsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getControlCommandAccess().getAlternatives(), "rule__ControlCommand__Alternatives");
			builder.put(grammarAccess.getCsvCommandAccess().getAlternatives(), "rule__CsvCommand__Alternatives");
			builder.put(grammarAccess.getAddCommandAccess().getOpAlternatives_2_0(), "rule__AddCommand__OpAlternatives_2_0");
			builder.put(grammarAccess.getCommentCommandAccess().getAlternatives(), "rule__CommentCommand__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getSelectorAccess().getAlternatives(), "rule__Selector__Alternatives");
			builder.put(grammarAccess.getEqualityAccess().getOpAlternatives_1_2_0(), "rule__Equality__OpAlternatives_1_2_0");
			builder.put(grammarAccess.getComparisonAccess().getOpAlternatives_1_2_0(), "rule__Comparison__OpAlternatives_1_2_0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOpAlternatives_1_0_2_0(), "rule__PlusOrMinus__OpAlternatives_1_0_2_0");
			builder.put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_0_2_0(), "rule__MulOrDiv__OpAlternatives_1_0_2_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getWhileCommandAccess().getGroup(), "rule__WhileCommand__Group__0");
			builder.put(grammarAccess.getIfCommandAccess().getGroup(), "rule__IfCommand__Group__0");
			builder.put(grammarAccess.getIfCommandAccess().getGroup_10(), "rule__IfCommand__Group_10__0");
			builder.put(grammarAccess.getLoadCommandAccess().getGroup(), "rule__LoadCommand__Group__0");
			builder.put(grammarAccess.getStoreCommandAccess().getGroup(), "rule__StoreCommand__Group__0");
			builder.put(grammarAccess.getCreateCommandAccess().getGroup(), "rule__CreateCommand__Group__0");
			builder.put(grammarAccess.getSetCommandAccess().getGroup(), "rule__SetCommand__Group__0");
			builder.put(grammarAccess.getPrintCommandAccess().getGroup(), "rule__PrintCommand__Group__0");
			builder.put(grammarAccess.getExportCommandAccess().getGroup(), "rule__ExportCommand__Group__0");
			builder.put(grammarAccess.getDeleteCommandAccess().getGroup(), "rule__DeleteCommand__Group__0");
			builder.put(grammarAccess.getAddCommandAccess().getGroup(), "rule__AddCommand__Group__0");
			builder.put(grammarAccess.getRowSelectAccess().getGroup(), "rule__RowSelect__Group__0");
			builder.put(grammarAccess.getColSelectAccess().getGroup(), "rule__ColSelect__Group__0");
			builder.put(grammarAccess.getCellSelectAccess().getGroup(), "rule__CellSelect__Group__0");
			builder.put(grammarAccess.getFieldSelectAccess().getGroup(), "rule__FieldSelect__Group__0");
			builder.put(grammarAccess.getCountExprAccess().getGroup(), "rule__CountExpr__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0(), "rule__PlusOrMinus__Group_1_0__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup_1_0(), "rule__MulOrDiv__Group_1_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getProgramAccess().getCommandsAssignment_1(), "rule__Program__CommandsAssignment_1");
			builder.put(grammarAccess.getWhileCommandAccess().getCondAssignment_4(), "rule__WhileCommand__CondAssignment_4");
			builder.put(grammarAccess.getWhileCommandAccess().getBodyAssignment_8(), "rule__WhileCommand__BodyAssignment_8");
			builder.put(grammarAccess.getIfCommandAccess().getCondAssignment_4(), "rule__IfCommand__CondAssignment_4");
			builder.put(grammarAccess.getIfCommandAccess().getThenBodyAssignment_8(), "rule__IfCommand__ThenBodyAssignment_8");
			builder.put(grammarAccess.getIfCommandAccess().getElseBodyAssignment_10_2(), "rule__IfCommand__ElseBodyAssignment_10_2");
			builder.put(grammarAccess.getLoadCommandAccess().getVarAssignment_2(), "rule__LoadCommand__VarAssignment_2");
			builder.put(grammarAccess.getStoreCommandAccess().getVarAssignment_2(), "rule__StoreCommand__VarAssignment_2");
			builder.put(grammarAccess.getCreateCommandAccess().getVarAssignment_2(), "rule__CreateCommand__VarAssignment_2");
			builder.put(grammarAccess.getSetCommandAccess().getVarAssignment_2(), "rule__SetCommand__VarAssignment_2");
			builder.put(grammarAccess.getSetCommandAccess().getExpressionAssignment_4(), "rule__SetCommand__ExpressionAssignment_4");
			builder.put(grammarAccess.getPrintCommandAccess().getExpressionAssignment_2(), "rule__PrintCommand__ExpressionAssignment_2");
			builder.put(grammarAccess.getExportCommandAccess().getExpressionAssignment_2(), "rule__ExportCommand__ExpressionAssignment_2");
			builder.put(grammarAccess.getDeleteCommandAccess().getExpressionAssignment_2(), "rule__DeleteCommand__ExpressionAssignment_2");
			builder.put(grammarAccess.getAddCommandAccess().getOpAssignment_2(), "rule__AddCommand__OpAssignment_2");
			builder.put(grammarAccess.getAddCommandAccess().getExpressionAssignment_4(), "rule__AddCommand__ExpressionAssignment_4");
			builder.put(grammarAccess.getVariableExprAccess().getTermAssignment(), "rule__VariableExpr__TermAssignment");
			builder.put(grammarAccess.getRowSelectAccess().getVarAssignment_2(), "rule__RowSelect__VarAssignment_2");
			builder.put(grammarAccess.getRowSelectAccess().getExpressionAssignment_6(), "rule__RowSelect__ExpressionAssignment_6");
			builder.put(grammarAccess.getColSelectAccess().getVarAssignment_2(), "rule__ColSelect__VarAssignment_2");
			builder.put(grammarAccess.getColSelectAccess().getExpressionAssignment_6(), "rule__ColSelect__ExpressionAssignment_6");
			builder.put(grammarAccess.getCellSelectAccess().getVarAssignment_2(), "rule__CellSelect__VarAssignment_2");
			builder.put(grammarAccess.getCellSelectAccess().getExpressionRowAssignment_6(), "rule__CellSelect__ExpressionRowAssignment_6");
			builder.put(grammarAccess.getCellSelectAccess().getExpressionColAssignment_10(), "rule__CellSelect__ExpressionColAssignment_10");
			builder.put(grammarAccess.getFieldSelectAccess().getVarAssignment_2(), "rule__FieldSelect__VarAssignment_2");
			builder.put(grammarAccess.getFieldSelectAccess().getExpressionAssignment_6(), "rule__FieldSelect__ExpressionAssignment_6");
			builder.put(grammarAccess.getCountExprAccess().getVarAssignment_2(), "rule__CountExpr__VarAssignment_2");
			builder.put(grammarAccess.getCountExprAccess().getExpressionAssignment_6(), "rule__CountExpr__ExpressionAssignment_6");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_4(), "rule__Or__RightAssignment_1_4");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_4(), "rule__And__RightAssignment_1_4");
			builder.put(grammarAccess.getEqualityAccess().getOpAssignment_1_2(), "rule__Equality__OpAssignment_1_2");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_4(), "rule__Equality__RightAssignment_1_4");
			builder.put(grammarAccess.getComparisonAccess().getOpAssignment_1_2(), "rule__Comparison__OpAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_4(), "rule__Comparison__RightAssignment_1_4");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_0_2(), "rule__PlusOrMinus__OpAssignment_1_0_2");
			builder.put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_2(), "rule__PlusOrMinus__RightAssignment_1_2");
			builder.put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_0_2(), "rule__MulOrDiv__OpAssignment_1_0_2");
			builder.put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CSVsGrammarAccess grammarAccess;

	@Override
	protected InternalCSVsParser createParser() {
		InternalCSVsParser result = new InternalCSVsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CSVsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CSVsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
