/*
 * generated by Xtext 2.23.0
 */
grammar InternalCSVs;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.agicquel.csvs.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.agicquel.csvs.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.agicquel.csvs.services.CSVsGrammarAccess;

}

@parser::members {

 	private CSVsGrammarAccess grammarAccess;

    public InternalCSVsParser(TokenStream input, CSVsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected CSVsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramAccess().getLCParserRuleCall_0());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getCommandsCommandParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"commands",
						lv_commands_1_0,
						"com.agicquel.csvs.CSVs.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		{
			newCompositeNode(grammarAccess.getProgramAccess().getLCParserRuleCall_2());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLC
entryRuleLC returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLCRule()); }
	iv_ruleLC=ruleLC
	{ $current=$iv_ruleLC.current.getText(); }
	EOF;

// Rule LC
ruleLC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WS_0=RULE_WS
		{
			$current.merge(this_WS_0);
		}
		{
			newLeafNode(this_WS_0, grammarAccess.getLCAccess().getWSTerminalRuleCall());
		}
	)?
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getCsvCommandParserRuleCall_0_0());
			}
			this_CsvCommand_0=ruleCsvCommand
			{
				$current = $this_CsvCommand_0.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getLCParserRuleCall_0_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getCommandAccess().getSemicolonKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getControlCommandParserRuleCall_1());
		}
		this_ControlCommand_3=ruleControlCommand
		{
			$current = $this_ControlCommand_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_2_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getCommandAccess().getCommentCommandParserRuleCall_2_1());
			}
			ruleCommentCommand
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getProgramParserRuleCall_2());
		}
		this_Program_2=ruleProgram
		{
			$current = $this_Program_2.current;
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleControlCommand
entryRuleControlCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlCommandRule()); }
	iv_ruleControlCommand=ruleControlCommand
	{ $current=$iv_ruleControlCommand.current; }
	EOF;

// Rule ControlCommand
ruleControlCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getControlCommandAccess().getWhileCommandParserRuleCall_0());
		}
		this_WhileCommand_0=ruleWhileCommand
		{
			$current = $this_WhileCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getControlCommandAccess().getIfCommandParserRuleCall_1());
		}
		this_IfCommand_1=ruleIfCommand
		{
			$current = $this_IfCommand_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWhileCommand
entryRuleWhileCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileCommandRule()); }
	iv_ruleWhileCommand=ruleWhileCommand
	{ $current=$iv_ruleWhileCommand.current; }
	EOF;

// Rule WhileCommand
ruleWhileCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileCommandAccess().getWhileKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileCommandAccess().getLeftParenthesisKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileCommandAccess().getCondExpressionParserRuleCall_4_0());
				}
				lv_cond_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileCommandRule());
					}
					set(
						$current,
						"cond",
						lv_cond_4_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getWhileCommandAccess().getRightParenthesisKeyword_6());
		}
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileCommandAccess().getBodyBlockParserRuleCall_8_0());
				}
				lv_body_8_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileCommandRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"com.agicquel.csvs.CSVs.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfCommand
entryRuleIfCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfCommandRule()); }
	iv_ruleIfCommand=ruleIfCommand
	{ $current=$iv_ruleIfCommand.current; }
	EOF;

// Rule IfCommand
ruleIfCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfCommandAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfCommandAccess().getLeftParenthesisKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfCommandAccess().getCondExpressionParserRuleCall_4_0());
				}
				lv_cond_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfCommandRule());
					}
					set(
						$current,
						"cond",
						lv_cond_4_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfCommandAccess().getRightParenthesisKeyword_6());
		}
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfCommandAccess().getThenBodyBlockParserRuleCall_8_0());
				}
				lv_thenBody_8_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfCommandRule());
					}
					set(
						$current,
						"thenBody",
						lv_thenBody_8_0,
						"com.agicquel.csvs.CSVs.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_9());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_10='else'
			{
				newLeafNode(otherlv_10, grammarAccess.getIfCommandAccess().getElseKeyword_10_0());
			}
			{
				newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_10_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfCommandAccess().getElseBodyBlockParserRuleCall_10_2_0());
					}
					lv_elseBody_12_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfCommandRule());
						}
						set(
							$current,
							"elseBody",
							lv_elseBody_12_0,
							"com.agicquel.csvs.CSVs.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_10_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleCsvCommand
entryRuleCsvCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvCommandRule()); }
	iv_ruleCsvCommand=ruleCsvCommand
	{ $current=$iv_ruleCsvCommand.current; }
	EOF;

// Rule CsvCommand
ruleCsvCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getLoadCommandParserRuleCall_0());
		}
		this_LoadCommand_0=ruleLoadCommand
		{
			$current = $this_LoadCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getStoreCommandParserRuleCall_1());
		}
		this_StoreCommand_1=ruleStoreCommand
		{
			$current = $this_StoreCommand_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getCreateCommandParserRuleCall_2());
		}
		this_CreateCommand_2=ruleCreateCommand
		{
			$current = $this_CreateCommand_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getSetCommandParserRuleCall_3());
		}
		this_SetCommand_3=ruleSetCommand
		{
			$current = $this_SetCommand_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getPrintCommandParserRuleCall_4());
		}
		this_PrintCommand_4=rulePrintCommand
		{
			$current = $this_PrintCommand_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getExportCommandParserRuleCall_5());
		}
		this_ExportCommand_5=ruleExportCommand
		{
			$current = $this_ExportCommand_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getDeleteCommandParserRuleCall_6());
		}
		this_DeleteCommand_6=ruleDeleteCommand
		{
			$current = $this_DeleteCommand_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvCommandAccess().getAddCommandParserRuleCall_7());
		}
		this_AddCommand_7=ruleAddCommand
		{
			$current = $this_AddCommand_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLoadCommand
entryRuleLoadCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadCommandRule()); }
	iv_ruleLoadCommand=ruleLoadCommand
	{ $current=$iv_ruleLoadCommand.current; }
	EOF;

// Rule LoadCommand
ruleLoadCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='load'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoadCommandAccess().getLoadKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getLoadCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getLoadCommandAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoadCommandRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getLoadCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		this_STRING_4=RULE_STRING
		{
			newLeafNode(this_STRING_4, grammarAccess.getLoadCommandAccess().getSTRINGTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleStoreCommand
entryRuleStoreCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoreCommandRule()); }
	iv_ruleStoreCommand=ruleStoreCommand
	{ $current=$iv_ruleStoreCommand.current; }
	EOF;

// Rule StoreCommand
ruleStoreCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='store'
		{
			newLeafNode(otherlv_0, grammarAccess.getStoreCommandAccess().getStoreKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getStoreCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getStoreCommandAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoreCommandRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getStoreCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		this_STRING_4=RULE_STRING
		{
			newLeafNode(this_STRING_4, grammarAccess.getStoreCommandAccess().getSTRINGTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleCreateCommand
entryRuleCreateCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateCommandRule()); }
	iv_ruleCreateCommand=ruleCreateCommand
	{ $current=$iv_ruleCreateCommand.current; }
	EOF;

// Rule CreateCommand
ruleCreateCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='create'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateCommandAccess().getCreateKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCreateCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getCreateCommandAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateCommandRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSetCommand
entryRuleSetCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetCommandRule()); }
	iv_ruleSetCommand=ruleSetCommand
	{ $current=$iv_ruleSetCommand.current; }
	EOF;

// Rule SetCommand
ruleSetCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetCommandAccess().getSetKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSetCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetCommandAccess().getVarExpressionParserRuleCall_2_0());
				}
				lv_var_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetCommandRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getSetCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetCommandAccess().getExpressionExpressionParserRuleCall_4_0());
				}
				lv_expression_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrintCommand
entryRulePrintCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintCommandRule()); }
	iv_rulePrintCommand=rulePrintCommand
	{ $current=$iv_rulePrintCommand.current; }
	EOF;

// Rule PrintCommand
rulePrintCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintCommandAccess().getPrintKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getPrintCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintCommandAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExportCommand
entryRuleExportCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportCommandRule()); }
	iv_ruleExportCommand=ruleExportCommand
	{ $current=$iv_ruleExportCommand.current; }
	EOF;

// Rule ExportCommand
ruleExportCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='export'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportCommandAccess().getExportKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExportCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportCommandAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeleteCommand
entryRuleDeleteCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteCommandRule()); }
	iv_ruleDeleteCommand=ruleDeleteCommand
	{ $current=$iv_ruleDeleteCommand.current; }
	EOF;

// Rule DeleteCommand
ruleDeleteCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteCommandAccess().getDeleteKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDeleteCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteCommandAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAddCommand
entryRuleAddCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddCommandRule()); }
	iv_ruleAddCommand=ruleAddCommand
	{ $current=$iv_ruleAddCommand.current; }
	EOF;

// Rule AddCommand
ruleAddCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddCommandAccess().getAddKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAddCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					lv_op_2_1='row'
					{
						newLeafNode(lv_op_2_1, grammarAccess.getAddCommandAccess().getOpRowKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddCommandRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_1, null);
					}
					    |
					lv_op_2_2='col'
					{
						newLeafNode(lv_op_2_2, grammarAccess.getAddCommandAccess().getOpColKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddCommandRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_2, null);
					}
				)
			)
		)
		{
			newCompositeNode(grammarAccess.getAddCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddCommandAccess().getExpressionExpressionParserRuleCall_4_0());
				}
				lv_expression_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommentCommand
entryRuleCommentCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommentCommandRule()); }
	iv_ruleCommentCommand=ruleCommentCommand
	{ $current=$iv_ruleCommentCommand.current.getText(); }
	EOF;

// Rule CommentCommand
ruleCommentCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ML_COMMENT_0=RULE_ML_COMMENT
		{
			$current.merge(this_ML_COMMENT_0);
		}
		{
			newLeafNode(this_ML_COMMENT_0, grammarAccess.getCommentCommandAccess().getML_COMMENTTerminalRuleCall_0());
		}
		    |
		this_SL_COMMENT_1=RULE_SL_COMMENT
		{
			$current.merge(this_SL_COMMENT_1);
		}
		{
			newLeafNode(this_SL_COMMENT_1, grammarAccess.getCommentCommandAccess().getSL_COMMENTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSelectorParserRuleCall_1());
		}
		this_Selector_1=ruleSelector
		{
			$current = $this_Selector_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCountExprParserRuleCall_2());
		}
		this_CountExpr_2=ruleCountExpr
		{
			$current = $this_CountExpr_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableExpr
entryRuleVariableExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableExprRule()); }
	iv_ruleVariableExpr=ruleVariableExpr
	{ $current=$iv_ruleVariableExpr.current; }
	EOF;

// Rule VariableExpr
ruleVariableExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_term_0_0=RULE_ID
			{
				newLeafNode(lv_term_0_0, grammarAccess.getVariableExprAccess().getTermIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableExprRule());
				}
				setWithLastConsumed(
					$current,
					"term",
					lv_term_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getRowSelectParserRuleCall_0());
		}
		this_RowSelect_0=ruleRowSelect
		{
			$current = $this_RowSelect_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getColSelectParserRuleCall_1());
		}
		this_ColSelect_1=ruleColSelect
		{
			$current = $this_ColSelect_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getCellSelectParserRuleCall_2());
		}
		this_CellSelect_2=ruleCellSelect
		{
			$current = $this_CellSelect_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getFieldSelectParserRuleCall_3());
		}
		this_FieldSelect_3=ruleFieldSelect
		{
			$current = $this_FieldSelect_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRowSelect
entryRuleRowSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowSelectRule()); }
	iv_ruleRowSelect=ruleRowSelect
	{ $current=$iv_ruleRowSelect.current; }
	EOF;

// Rule RowSelect
ruleRowSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='row'
		{
			newLeafNode(otherlv_0, grammarAccess.getRowSelectAccess().getRowKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRowSelectAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getRowSelectAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRowSelectRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getRowSelectAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getRowSelectAccess().getLeftParenthesisKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getRowSelectAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRowSelectAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowSelectRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getRowSelectAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getRowSelectAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleColSelect
entryRuleColSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColSelectRule()); }
	iv_ruleColSelect=ruleColSelect
	{ $current=$iv_ruleColSelect.current; }
	EOF;

// Rule ColSelect
ruleColSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='col'
		{
			newLeafNode(otherlv_0, grammarAccess.getColSelectAccess().getColKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getColSelectAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getColSelectAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColSelectRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getColSelectAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getColSelectAccess().getLeftParenthesisKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getColSelectAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColSelectAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColSelectRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getColSelectAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getColSelectAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleCellSelect
entryRuleCellSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCellSelectRule()); }
	iv_ruleCellSelect=ruleCellSelect
	{ $current=$iv_ruleCellSelect.current; }
	EOF;

// Rule CellSelect
ruleCellSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cell'
		{
			newLeafNode(otherlv_0, grammarAccess.getCellSelectAccess().getCellKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCellSelectAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getCellSelectAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCellSelectRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCellSelectAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getCellSelectAccess().getLeftParenthesisKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getCellSelectAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCellSelectAccess().getExpressionRowExpressionParserRuleCall_6_0());
				}
				lv_expressionRow_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCellSelectRule());
					}
					set(
						$current,
						"expressionRow",
						lv_expressionRow_6_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCellSelectAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getCellSelectAccess().getCommaKeyword_8());
		}
		{
			newCompositeNode(grammarAccess.getCellSelectAccess().getLCParserRuleCall_9());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCellSelectAccess().getExpressionColExpressionParserRuleCall_10_0());
				}
				lv_expressionCol_10_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCellSelectRule());
					}
					set(
						$current,
						"expressionCol",
						lv_expressionCol_10_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCellSelectAccess().getLCParserRuleCall_11());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getCellSelectAccess().getRightParenthesisKeyword_12());
		}
	)
;

// Entry rule entryRuleFieldSelect
entryRuleFieldSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldSelectRule()); }
	iv_ruleFieldSelect=ruleFieldSelect
	{ $current=$iv_ruleFieldSelect.current; }
	EOF;

// Rule FieldSelect
ruleFieldSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='field'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldSelectAccess().getFieldKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFieldSelectAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getFieldSelectAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldSelectRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getFieldSelectAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getFieldSelectAccess().getLeftParenthesisKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getFieldSelectAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldSelectAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldSelectRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getFieldSelectAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getFieldSelectAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleCountExpr
entryRuleCountExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountExprRule()); }
	iv_ruleCountExpr=ruleCountExpr
	{ $current=$iv_ruleCountExpr.current; }
	EOF;

// Rule CountExpr
ruleCountExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='count'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountExprAccess().getCountKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCountExprAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getCountExprAccess().getVarIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountExprRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCountExprAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getCountExprAccess().getLeftParenthesisKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getCountExprAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCountExprAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCountExprRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"com.agicquel.csvs.CSVs.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCountExprAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getCountExprAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getOrAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_3='||'
			{
				newLeafNode(otherlv_3, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getOrAccess().getLCParserRuleCall_1_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_4_0());
					}
					lv_right_5_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.agicquel.csvs.CSVs.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getAndAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_3='&&'
			{
				newLeafNode(otherlv_3, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getAndAccess().getLCParserRuleCall_1_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_4_0());
					}
					lv_right_5_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.agicquel.csvs.CSVs.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getEqualityAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						lv_op_3_1='=='
						{
							newLeafNode(lv_op_3_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_3_1, null);
						}
						    |
						lv_op_3_2='!='
						{
							newLeafNode(lv_op_3_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_3_2, null);
						}
					)
				)
			)
			{
				newCompositeNode(grammarAccess.getEqualityAccess().getLCParserRuleCall_1_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_4_0());
					}
					lv_right_5_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.agicquel.csvs.CSVs.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getComparisonAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						lv_op_3_1='>='
						{
							newLeafNode(lv_op_3_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_3_1, null);
						}
						    |
						lv_op_3_2='<='
						{
							newLeafNode(lv_op_3_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_3_2, null);
						}
						    |
						lv_op_3_3='>'
						{
							newLeafNode(lv_op_3_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_2_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_3_3, null);
						}
						    |
						lv_op_3_4='<'
						{
							newLeafNode(lv_op_3_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_2_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_3_4, null);
						}
					)
				)
			)
			{
				newCompositeNode(grammarAccess.getComparisonAccess().getLCParserRuleCall_1_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_4_0());
					}
					lv_right_5_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.agicquel.csvs.CSVs.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0(),
							$current);
					}
				)
				{
					newCompositeNode(grammarAccess.getPlusOrMinusAccess().getLCParserRuleCall_1_0_1());
				}
				ruleLC
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						(
							lv_op_3_1='+'
							{
								newLeafNode(lv_op_3_1, grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_0_2_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getPlusOrMinusRule());
								}
								setWithLastConsumed($current, "op", lv_op_3_1, null);
							}
							    |
							lv_op_3_2='-'
							{
								newLeafNode(lv_op_3_2, grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_0_2_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getPlusOrMinusRule());
								}
								setWithLastConsumed($current, "op", lv_op_3_2, null);
							}
						)
					)
				)
			)
			{
				newCompositeNode(grammarAccess.getPlusOrMinusAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_2_0());
					}
					lv_right_5_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.agicquel.csvs.CSVs.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0_0(),
							$current);
					}
				)
				{
					newCompositeNode(grammarAccess.getMulOrDivAccess().getLCParserRuleCall_1_0_1());
				}
				ruleLC
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						(
							lv_op_3_1='*'
							{
								newLeafNode(lv_op_3_1, grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_0_2_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMulOrDivRule());
								}
								setWithLastConsumed($current, "op", lv_op_3_1, null);
							}
							    |
							lv_op_3_2='/'
							{
								newLeafNode(lv_op_3_2, grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_0_2_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMulOrDivRule());
								}
								setWithLastConsumed($current, "op", lv_op_3_2, null);
							}
						)
					)
				)
			)
			{
				newCompositeNode(grammarAccess.getMulOrDivAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.agicquel.csvs.CSVs.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getLCParserRuleCall_0_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_2());
			}
			this_Expression_2=ruleExpression
			{
				$current = $this_Expression_2.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getLCParserRuleCall_0_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_6='!'
			{
				newLeafNode(otherlv_6, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_7_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_7_0,
							"com.agicquel.csvs.CSVs.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_8=ruleAtomic
		{
			$current = $this_Atomic_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getIntConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getBoolConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_5_1='true'
						{
							newLeafNode(lv_value_5_1, grammarAccess.getAtomicAccess().getValueTrueKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicRule());
							}
							setWithLastConsumed($current, "value", lv_value_5_1, null);
						}
						    |
						lv_value_5_2='false'
						{
							newLeafNode(lv_value_5_2, grammarAccess.getAtomicAccess().getValueFalseKeyword_2_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicRule());
							}
							setWithLastConsumed($current, "value", lv_value_5_2, null);
						}
					)
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getVariableExprParserRuleCall_3());
		}
		this_VariableExpr_6=ruleVariableExpr
		{
			$current = $this_VariableExpr_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
