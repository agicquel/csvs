Statement:
	Expressions | Command | Block
;

Block:
	'{' LC Model LC '}'
;


////////////////////////////
///////// COMMANDS /////////
////////////////////////////

Command:
	WhileCommand | IfCommand | VarDeclCommand | {Command} Exit | VarAssignCommand
;

WhileCommand:
	'while' LC '(' LC cond=Expression LC ')' LC body=Block LC
;

IfCommand:
	'if' LC '(' cond=Expression LC ')' LC thenBody=Block LC ('else' LC elseBody=Block LC)?
;

VarDeclCommand:
	(VarDeclCommandString | VarDeclCommandInteger | VarDeclCommandCsv) LC ';'
;

VarDeclCommandString:
	'string' LC variable=ID LC '=' LC value=STRING
;

VarDeclCommandInteger:
	'integer' LC variable=ID LC '=' LC value=INT
;

VarDeclCommandCsv:
	'csv' LC variable=ID LC '=' LC path=STRING
;

Exit:
	'exit' LC ';'
;

VarAssignCommand:
	term=ID LC '=' LC value=Expression LC ';'
;


////////////////////////////
/////// EXPRESSIONS ////////
////////////////////////////

Expressions:
	expressions+=Expression LC ';'
;

Expression:
	SymbolExpr | NumberExpr | CountExpr | CsvAccessorExpr
;


SymbolExpr:
	term=ID
;

NumberExpr:
	term=INT
;

CountExpr:
	'count' LC term=ID
;

CsvAccessorExpr:
	term=ID LC '[' LC expr=(CsvAccessorRowExpr | CsvAccessorColExpr | CsvAccessorCellExpr) LC ']'
;

CsvAccessorRowExpr:
	row=Expression LC ','
;

CsvAccessorColExpr:
	',' LC col=Expression
;

CsvAccessorCellExpr:
	row=Expression LC ',' LC col=Expression
;

//CsvPrimitive:
//	Load | Save | Count | DelRow | AddRow | DeLCol | AddCol
//;
