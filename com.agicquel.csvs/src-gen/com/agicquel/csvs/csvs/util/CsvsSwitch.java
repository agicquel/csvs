/**
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.csvs.util;

import com.agicquel.csvs.csvs.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.agicquel.csvs.csvs.CsvsPackage
 * @generated
 */
public class CsvsSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CsvsPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CsvsSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = CsvsPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case CsvsPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.COMMAND:
      {
        Command command = (Command)theEObject;
        T result = caseCommand(command);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.CONTROL_COMMAND:
      {
        ControlCommand controlCommand = (ControlCommand)theEObject;
        T result = caseControlCommand(controlCommand);
        if (result == null) result = caseCommand(controlCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.WHILE_COMMAND:
      {
        WhileCommand whileCommand = (WhileCommand)theEObject;
        T result = caseWhileCommand(whileCommand);
        if (result == null) result = caseControlCommand(whileCommand);
        if (result == null) result = caseCommand(whileCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.IF_COMMAND:
      {
        IfCommand ifCommand = (IfCommand)theEObject;
        T result = caseIfCommand(ifCommand);
        if (result == null) result = caseControlCommand(ifCommand);
        if (result == null) result = caseCommand(ifCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.CSV_COMMAND:
      {
        CsvCommand csvCommand = (CsvCommand)theEObject;
        T result = caseCsvCommand(csvCommand);
        if (result == null) result = caseCommand(csvCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.LOAD_COMMAND:
      {
        LoadCommand loadCommand = (LoadCommand)theEObject;
        T result = caseLoadCommand(loadCommand);
        if (result == null) result = caseCsvCommand(loadCommand);
        if (result == null) result = caseCommand(loadCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.STORE_COMMAND:
      {
        StoreCommand storeCommand = (StoreCommand)theEObject;
        T result = caseStoreCommand(storeCommand);
        if (result == null) result = caseCsvCommand(storeCommand);
        if (result == null) result = caseCommand(storeCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.EXPORT_COMMAND:
      {
        ExportCommand exportCommand = (ExportCommand)theEObject;
        T result = caseExportCommand(exportCommand);
        if (result == null) result = caseCsvCommand(exportCommand);
        if (result == null) result = caseCommand(exportCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.CREATE_COMMAND:
      {
        CreateCommand createCommand = (CreateCommand)theEObject;
        T result = caseCreateCommand(createCommand);
        if (result == null) result = caseCsvCommand(createCommand);
        if (result == null) result = caseCommand(createCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.SET_COMMAND:
      {
        SetCommand setCommand = (SetCommand)theEObject;
        T result = caseSetCommand(setCommand);
        if (result == null) result = caseCsvCommand(setCommand);
        if (result == null) result = caseCommand(setCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.PRINT_COMMAND:
      {
        PrintCommand printCommand = (PrintCommand)theEObject;
        T result = casePrintCommand(printCommand);
        if (result == null) result = caseCsvCommand(printCommand);
        if (result == null) result = caseCommand(printCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.DELETE_COMMAND:
      {
        DeleteCommand deleteCommand = (DeleteCommand)theEObject;
        T result = caseDeleteCommand(deleteCommand);
        if (result == null) result = caseCsvCommand(deleteCommand);
        if (result == null) result = caseCommand(deleteCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.ADD_COMMAND:
      {
        AddCommand addCommand = (AddCommand)theEObject;
        T result = caseAddCommand(addCommand);
        if (result == null) result = caseCsvCommand(addCommand);
        if (result == null) result = caseCommand(addCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.APPLY_COMMAND:
      {
        ApplyCommand applyCommand = (ApplyCommand)theEObject;
        T result = caseApplyCommand(applyCommand);
        if (result == null) result = caseCsvCommand(applyCommand);
        if (result == null) result = caseCommand(applyCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.APPLY_FILTER_COMMAND:
      {
        ApplyFilterCommand applyFilterCommand = (ApplyFilterCommand)theEObject;
        T result = caseApplyFilterCommand(applyFilterCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.APPLY_EXEC_COMMAND:
      {
        ApplyExecCommand applyExecCommand = (ApplyExecCommand)theEObject;
        T result = caseApplyExecCommand(applyExecCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = casePrimaryExpr(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.SELECTOR:
      {
        Selector selector = (Selector)theEObject;
        T result = caseSelector(selector);
        if (result == null) result = casePrimaryExpr(selector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.ROW_SELECT:
      {
        RowSelect rowSelect = (RowSelect)theEObject;
        T result = caseRowSelect(rowSelect);
        if (result == null) result = caseSelector(rowSelect);
        if (result == null) result = casePrimaryExpr(rowSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.COL_SELECT:
      {
        ColSelect colSelect = (ColSelect)theEObject;
        T result = caseColSelect(colSelect);
        if (result == null) result = caseSelector(colSelect);
        if (result == null) result = casePrimaryExpr(colSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.CELL_SELECT:
      {
        CellSelect cellSelect = (CellSelect)theEObject;
        T result = caseCellSelect(cellSelect);
        if (result == null) result = caseSelector(cellSelect);
        if (result == null) result = casePrimaryExpr(cellSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.FIELD_SELECT:
      {
        FieldSelect fieldSelect = (FieldSelect)theEObject;
        T result = caseFieldSelect(fieldSelect);
        if (result == null) result = caseSelector(fieldSelect);
        if (result == null) result = casePrimaryExpr(fieldSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.VARIABLE_SELECT:
      {
        VariableSelect variableSelect = (VariableSelect)theEObject;
        T result = caseVariableSelect(variableSelect);
        if (result == null) result = caseSelector(variableSelect);
        if (result == null) result = casePrimaryExpr(variableSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.COUNT_EXPR:
      {
        CountExpr countExpr = (CountExpr)theEObject;
        T result = caseCountExpr(countExpr);
        if (result == null) result = casePrimaryExpr(countExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.OR_EXPR:
      {
        OrExpr orExpr = (OrExpr)theEObject;
        T result = caseOrExpr(orExpr);
        if (result == null) result = caseExpression(orExpr);
        if (result == null) result = casePrimaryExpr(orExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.ADD_EXPR:
      {
        AddExpr addExpr = (AddExpr)theEObject;
        T result = caseAddExpr(addExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.EQUALITY_EXPR:
      {
        EqualityExpr equalityExpr = (EqualityExpr)theEObject;
        T result = caseEqualityExpr(equalityExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.COMPARAISON_EXPR:
      {
        ComparaisonExpr comparaisonExpr = (ComparaisonExpr)theEObject;
        T result = caseComparaisonExpr(comparaisonExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.PLUS_OR_MINUS_EXPR:
      {
        PlusOrMinusExpr plusOrMinusExpr = (PlusOrMinusExpr)theEObject;
        T result = casePlusOrMinusExpr(plusOrMinusExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.MUL_OR_DIV_EXPR:
      {
        MulOrDivExpr mulOrDivExpr = (MulOrDivExpr)theEObject;
        T result = caseMulOrDivExpr(mulOrDivExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.PRIMARY_EXPR:
      {
        PrimaryExpr primaryExpr = (PrimaryExpr)theEObject;
        T result = casePrimaryExpr(primaryExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.NOT_EXPR:
      {
        NotExpr notExpr = (NotExpr)theEObject;
        T result = caseNotExpr(notExpr);
        if (result == null) result = casePrimaryExpr(notExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.ATOMIC_EXPR:
      {
        AtomicExpr atomicExpr = (AtomicExpr)theEObject;
        T result = caseAtomicExpr(atomicExpr);
        if (result == null) result = casePrimaryExpr(atomicExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.INT_CONSTANT:
      {
        IntConstant intConstant = (IntConstant)theEObject;
        T result = caseIntConstant(intConstant);
        if (result == null) result = caseAtomicExpr(intConstant);
        if (result == null) result = casePrimaryExpr(intConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.STRING_CONSTANT:
      {
        StringConstant stringConstant = (StringConstant)theEObject;
        T result = caseStringConstant(stringConstant);
        if (result == null) result = caseAtomicExpr(stringConstant);
        if (result == null) result = casePrimaryExpr(stringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CsvsPackage.BOOL_CONSTANT:
      {
        BoolConstant boolConstant = (BoolConstant)theEObject;
        T result = caseBoolConstant(boolConstant);
        if (result == null) result = caseAtomicExpr(boolConstant);
        if (result == null) result = casePrimaryExpr(boolConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommand(Command object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlCommand(ControlCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileCommand(WhileCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfCommand(IfCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Csv Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Csv Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCsvCommand(CsvCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadCommand(LoadCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Store Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Store Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStoreCommand(StoreCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExportCommand(ExportCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateCommand(CreateCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetCommand(SetCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintCommand(PrintCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteCommand(DeleteCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddCommand(AddCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyCommand(ApplyCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply Filter Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply Filter Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyFilterCommand(ApplyFilterCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply Exec Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply Exec Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyExecCommand(ApplyExecCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelector(Selector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Row Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Row Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRowSelect(RowSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Col Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Col Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColSelect(ColSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cell Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cell Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCellSelect(CellSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldSelect(FieldSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableSelect(VariableSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Count Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Count Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCountExpr(CountExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrExpr(OrExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddExpr(AddExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityExpr(EqualityExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparaison Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparaison Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparaisonExpr(ComparaisonExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus Or Minus Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus Or Minus Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlusOrMinusExpr(PlusOrMinusExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Or Div Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Or Div Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOrDivExpr(MulOrDivExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpr(PrimaryExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotExpr(NotExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpr(AtomicExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntConstant(IntConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringConstant(StringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolConstant(BoolConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //CsvsSwitch
