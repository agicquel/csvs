/**
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.csvs.impl;

import com.agicquel.csvs.csvs.ApplyCommand;
import com.agicquel.csvs.csvs.ApplyExecCommand;
import com.agicquel.csvs.csvs.ApplyFilterCommand;
import com.agicquel.csvs.csvs.CsvsPackage;
import com.agicquel.csvs.csvs.Selector;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Apply Command</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.agicquel.csvs.csvs.impl.ApplyCommandImpl#getSelection <em>Selection</em>}</li>
 *   <li>{@link com.agicquel.csvs.csvs.impl.ApplyCommandImpl#getIf <em>If</em>}</li>
 *   <li>{@link com.agicquel.csvs.csvs.impl.ApplyCommandImpl#getExec <em>Exec</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ApplyCommandImpl extends CsvCommandImpl implements ApplyCommand
{
  /**
   * The cached value of the '{@link #getSelection() <em>Selection</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelection()
   * @generated
   * @ordered
   */
  protected Selector selection;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected ApplyFilterCommand if_;

  /**
   * The cached value of the '{@link #getExec() <em>Exec</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExec()
   * @generated
   * @ordered
   */
  protected ApplyExecCommand exec;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplyCommandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsvsPackage.Literals.APPLY_COMMAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector getSelection()
  {
    return selection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelection(Selector newSelection, NotificationChain msgs)
  {
    Selector oldSelection = selection;
    selection = newSelection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.APPLY_COMMAND__SELECTION, oldSelection, newSelection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelection(Selector newSelection)
  {
    if (newSelection != selection)
    {
      NotificationChain msgs = null;
      if (selection != null)
        msgs = ((InternalEObject)selection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.APPLY_COMMAND__SELECTION, null, msgs);
      if (newSelection != null)
        msgs = ((InternalEObject)newSelection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.APPLY_COMMAND__SELECTION, null, msgs);
      msgs = basicSetSelection(newSelection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.APPLY_COMMAND__SELECTION, newSelection, newSelection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplyFilterCommand getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf(ApplyFilterCommand newIf, NotificationChain msgs)
  {
    ApplyFilterCommand oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.APPLY_COMMAND__IF, oldIf, newIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIf(ApplyFilterCommand newIf)
  {
    if (newIf != if_)
    {
      NotificationChain msgs = null;
      if (if_ != null)
        msgs = ((InternalEObject)if_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.APPLY_COMMAND__IF, null, msgs);
      if (newIf != null)
        msgs = ((InternalEObject)newIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.APPLY_COMMAND__IF, null, msgs);
      msgs = basicSetIf(newIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.APPLY_COMMAND__IF, newIf, newIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplyExecCommand getExec()
  {
    return exec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExec(ApplyExecCommand newExec, NotificationChain msgs)
  {
    ApplyExecCommand oldExec = exec;
    exec = newExec;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.APPLY_COMMAND__EXEC, oldExec, newExec);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExec(ApplyExecCommand newExec)
  {
    if (newExec != exec)
    {
      NotificationChain msgs = null;
      if (exec != null)
        msgs = ((InternalEObject)exec).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.APPLY_COMMAND__EXEC, null, msgs);
      if (newExec != null)
        msgs = ((InternalEObject)newExec).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.APPLY_COMMAND__EXEC, null, msgs);
      msgs = basicSetExec(newExec, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.APPLY_COMMAND__EXEC, newExec, newExec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsvsPackage.APPLY_COMMAND__SELECTION:
        return basicSetSelection(null, msgs);
      case CsvsPackage.APPLY_COMMAND__IF:
        return basicSetIf(null, msgs);
      case CsvsPackage.APPLY_COMMAND__EXEC:
        return basicSetExec(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsvsPackage.APPLY_COMMAND__SELECTION:
        return getSelection();
      case CsvsPackage.APPLY_COMMAND__IF:
        return getIf();
      case CsvsPackage.APPLY_COMMAND__EXEC:
        return getExec();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsvsPackage.APPLY_COMMAND__SELECTION:
        setSelection((Selector)newValue);
        return;
      case CsvsPackage.APPLY_COMMAND__IF:
        setIf((ApplyFilterCommand)newValue);
        return;
      case CsvsPackage.APPLY_COMMAND__EXEC:
        setExec((ApplyExecCommand)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsvsPackage.APPLY_COMMAND__SELECTION:
        setSelection((Selector)null);
        return;
      case CsvsPackage.APPLY_COMMAND__IF:
        setIf((ApplyFilterCommand)null);
        return;
      case CsvsPackage.APPLY_COMMAND__EXEC:
        setExec((ApplyExecCommand)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsvsPackage.APPLY_COMMAND__SELECTION:
        return selection != null;
      case CsvsPackage.APPLY_COMMAND__IF:
        return if_ != null;
      case CsvsPackage.APPLY_COMMAND__EXEC:
        return exec != null;
    }
    return super.eIsSet(featureID);
  }

} //ApplyCommandImpl
