/**
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.csvs.impl;

import com.agicquel.csvs.csvs.ConcatCommand;
import com.agicquel.csvs.csvs.CsvsExpr;
import com.agicquel.csvs.csvs.CsvsPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concat Command</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.agicquel.csvs.csvs.impl.ConcatCommandImpl#getSelection1 <em>Selection1</em>}</li>
 *   <li>{@link com.agicquel.csvs.csvs.impl.ConcatCommandImpl#getSelection2 <em>Selection2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConcatCommandImpl extends CsvCommandImpl implements ConcatCommand
{
  /**
   * The cached value of the '{@link #getSelection1() <em>Selection1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelection1()
   * @generated
   * @ordered
   */
  protected CsvsExpr selection1;

  /**
   * The cached value of the '{@link #getSelection2() <em>Selection2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelection2()
   * @generated
   * @ordered
   */
  protected CsvsExpr selection2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConcatCommandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsvsPackage.Literals.CONCAT_COMMAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CsvsExpr getSelection1()
  {
    return selection1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelection1(CsvsExpr newSelection1, NotificationChain msgs)
  {
    CsvsExpr oldSelection1 = selection1;
    selection1 = newSelection1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.CONCAT_COMMAND__SELECTION1, oldSelection1, newSelection1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelection1(CsvsExpr newSelection1)
  {
    if (newSelection1 != selection1)
    {
      NotificationChain msgs = null;
      if (selection1 != null)
        msgs = ((InternalEObject)selection1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CONCAT_COMMAND__SELECTION1, null, msgs);
      if (newSelection1 != null)
        msgs = ((InternalEObject)newSelection1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CONCAT_COMMAND__SELECTION1, null, msgs);
      msgs = basicSetSelection1(newSelection1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.CONCAT_COMMAND__SELECTION1, newSelection1, newSelection1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CsvsExpr getSelection2()
  {
    return selection2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelection2(CsvsExpr newSelection2, NotificationChain msgs)
  {
    CsvsExpr oldSelection2 = selection2;
    selection2 = newSelection2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.CONCAT_COMMAND__SELECTION2, oldSelection2, newSelection2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelection2(CsvsExpr newSelection2)
  {
    if (newSelection2 != selection2)
    {
      NotificationChain msgs = null;
      if (selection2 != null)
        msgs = ((InternalEObject)selection2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CONCAT_COMMAND__SELECTION2, null, msgs);
      if (newSelection2 != null)
        msgs = ((InternalEObject)newSelection2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CONCAT_COMMAND__SELECTION2, null, msgs);
      msgs = basicSetSelection2(newSelection2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.CONCAT_COMMAND__SELECTION2, newSelection2, newSelection2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsvsPackage.CONCAT_COMMAND__SELECTION1:
        return basicSetSelection1(null, msgs);
      case CsvsPackage.CONCAT_COMMAND__SELECTION2:
        return basicSetSelection2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsvsPackage.CONCAT_COMMAND__SELECTION1:
        return getSelection1();
      case CsvsPackage.CONCAT_COMMAND__SELECTION2:
        return getSelection2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsvsPackage.CONCAT_COMMAND__SELECTION1:
        setSelection1((CsvsExpr)newValue);
        return;
      case CsvsPackage.CONCAT_COMMAND__SELECTION2:
        setSelection2((CsvsExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsvsPackage.CONCAT_COMMAND__SELECTION1:
        setSelection1((CsvsExpr)null);
        return;
      case CsvsPackage.CONCAT_COMMAND__SELECTION2:
        setSelection2((CsvsExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsvsPackage.CONCAT_COMMAND__SELECTION1:
        return selection1 != null;
      case CsvsPackage.CONCAT_COMMAND__SELECTION2:
        return selection2 != null;
    }
    return super.eIsSet(featureID);
  }

} //ConcatCommandImpl
