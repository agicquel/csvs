/**
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.csvs.impl;

import com.agicquel.csvs.csvs.CellSelect;
import com.agicquel.csvs.csvs.CsvsPackage;
import com.agicquel.csvs.csvs.Expression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cell Select</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.agicquel.csvs.csvs.impl.CellSelectImpl#getExpressionRow <em>Expression Row</em>}</li>
 *   <li>{@link com.agicquel.csvs.csvs.impl.CellSelectImpl#getExpressionCol <em>Expression Col</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CellSelectImpl extends SelectorImpl implements CellSelect
{
  /**
   * The cached value of the '{@link #getExpressionRow() <em>Expression Row</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionRow()
   * @generated
   * @ordered
   */
  protected Expression expressionRow;

  /**
   * The cached value of the '{@link #getExpressionCol() <em>Expression Col</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionCol()
   * @generated
   * @ordered
   */
  protected Expression expressionCol;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CellSelectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsvsPackage.Literals.CELL_SELECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpressionRow()
  {
    return expressionRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionRow(Expression newExpressionRow, NotificationChain msgs)
  {
    Expression oldExpressionRow = expressionRow;
    expressionRow = newExpressionRow;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.CELL_SELECT__EXPRESSION_ROW, oldExpressionRow, newExpressionRow);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionRow(Expression newExpressionRow)
  {
    if (newExpressionRow != expressionRow)
    {
      NotificationChain msgs = null;
      if (expressionRow != null)
        msgs = ((InternalEObject)expressionRow).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CELL_SELECT__EXPRESSION_ROW, null, msgs);
      if (newExpressionRow != null)
        msgs = ((InternalEObject)newExpressionRow).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CELL_SELECT__EXPRESSION_ROW, null, msgs);
      msgs = basicSetExpressionRow(newExpressionRow, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.CELL_SELECT__EXPRESSION_ROW, newExpressionRow, newExpressionRow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpressionCol()
  {
    return expressionCol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionCol(Expression newExpressionCol, NotificationChain msgs)
  {
    Expression oldExpressionCol = expressionCol;
    expressionCol = newExpressionCol;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvsPackage.CELL_SELECT__EXPRESSION_COL, oldExpressionCol, newExpressionCol);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionCol(Expression newExpressionCol)
  {
    if (newExpressionCol != expressionCol)
    {
      NotificationChain msgs = null;
      if (expressionCol != null)
        msgs = ((InternalEObject)expressionCol).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CELL_SELECT__EXPRESSION_COL, null, msgs);
      if (newExpressionCol != null)
        msgs = ((InternalEObject)newExpressionCol).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvsPackage.CELL_SELECT__EXPRESSION_COL, null, msgs);
      msgs = basicSetExpressionCol(newExpressionCol, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvsPackage.CELL_SELECT__EXPRESSION_COL, newExpressionCol, newExpressionCol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsvsPackage.CELL_SELECT__EXPRESSION_ROW:
        return basicSetExpressionRow(null, msgs);
      case CsvsPackage.CELL_SELECT__EXPRESSION_COL:
        return basicSetExpressionCol(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsvsPackage.CELL_SELECT__EXPRESSION_ROW:
        return getExpressionRow();
      case CsvsPackage.CELL_SELECT__EXPRESSION_COL:
        return getExpressionCol();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsvsPackage.CELL_SELECT__EXPRESSION_ROW:
        setExpressionRow((Expression)newValue);
        return;
      case CsvsPackage.CELL_SELECT__EXPRESSION_COL:
        setExpressionCol((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsvsPackage.CELL_SELECT__EXPRESSION_ROW:
        setExpressionRow((Expression)null);
        return;
      case CsvsPackage.CELL_SELECT__EXPRESSION_COL:
        setExpressionCol((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsvsPackage.CELL_SELECT__EXPRESSION_ROW:
        return expressionRow != null;
      case CsvsPackage.CELL_SELECT__EXPRESSION_COL:
        return expressionCol != null;
    }
    return super.eIsSet(featureID);
  }

} //CellSelectImpl
