/**
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.csvs.impl;

import com.agicquel.csvs.csvs.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CsvsFactoryImpl extends EFactoryImpl implements CsvsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CsvsFactory init()
  {
    try
    {
      CsvsFactory theCsvsFactory = (CsvsFactory)EPackage.Registry.INSTANCE.getEFactory(CsvsPackage.eNS_URI);
      if (theCsvsFactory != null)
      {
        return theCsvsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CsvsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CsvsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CsvsPackage.MODEL: return createModel();
      case CsvsPackage.COMMAND: return createCommand();
      case CsvsPackage.BLOCK: return createBlock();
      case CsvsPackage.CONTROL_COMMAND: return createControlCommand();
      case CsvsPackage.WHILE_COMMAND: return createWhileCommand();
      case CsvsPackage.IF_COMMAND: return createIfCommand();
      case CsvsPackage.CSV_COMMAND: return createCsvCommand();
      case CsvsPackage.LOAD_COMMAND: return createLoadCommand();
      case CsvsPackage.STORE_COMMAND: return createStoreCommand();
      case CsvsPackage.EXPORT_COMMAND: return createExportCommand();
      case CsvsPackage.CREATE_COMMAND: return createCreateCommand();
      case CsvsPackage.SET_COMMAND: return createSetCommand();
      case CsvsPackage.PRINT_COMMAND: return createPrintCommand();
      case CsvsPackage.DELETE_COMMAND: return createDeleteCommand();
      case CsvsPackage.ADD_COMMAND: return createAddCommand();
      case CsvsPackage.RENAME_COMMAND: return createRenameCommand();
      case CsvsPackage.APPLY_COMMAND: return createApplyCommand();
      case CsvsPackage.APPLY_FILTER_COMMAND: return createApplyFilterCommand();
      case CsvsPackage.APPLY_EXEC_COMMAND: return createApplyExecCommand();
      case CsvsPackage.EXPRESSION: return createExpression();
      case CsvsPackage.OR_EXPR: return createOrExpr();
      case CsvsPackage.ADD_EXPR: return createAddExpr();
      case CsvsPackage.EQUALITY_EXPR: return createEqualityExpr();
      case CsvsPackage.COMPARAISON_EXPR: return createComparaisonExpr();
      case CsvsPackage.PLUS_OR_MINUS_EXPR: return createPlusOrMinusExpr();
      case CsvsPackage.MUL_OR_DIV_EXPR: return createMulOrDivExpr();
      case CsvsPackage.NOT_EXPR: return createNotExpr();
      case CsvsPackage.PRIMARY_EXPR: return createPrimaryExpr();
      case CsvsPackage.CSVS_EXPR: return createCsvsExpr();
      case CsvsPackage.SELECTOR: return createSelector();
      case CsvsPackage.FIELD_SELECT: return createFieldSelect();
      case CsvsPackage.COUNT_EXPR: return createCountExpr();
      case CsvsPackage.LAST_EXPR: return createLastExpr();
      case CsvsPackage.ATOMIC_EXPR: return createAtomicExpr();
      case CsvsPackage.INT_CONSTANT: return createIntConstant();
      case CsvsPackage.DOUBLE_CONSTANT: return createDoubleConstant();
      case CsvsPackage.STRING_CONSTANT: return createStringConstant();
      case CsvsPackage.BOOL_CONSTANT: return createBoolConstant();
      case CsvsPackage.VARIABLE_CONSTANT: return createVariableConstant();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControlCommand createControlCommand()
  {
    ControlCommandImpl controlCommand = new ControlCommandImpl();
    return controlCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileCommand createWhileCommand()
  {
    WhileCommandImpl whileCommand = new WhileCommandImpl();
    return whileCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfCommand createIfCommand()
  {
    IfCommandImpl ifCommand = new IfCommandImpl();
    return ifCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CsvCommand createCsvCommand()
  {
    CsvCommandImpl csvCommand = new CsvCommandImpl();
    return csvCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoadCommand createLoadCommand()
  {
    LoadCommandImpl loadCommand = new LoadCommandImpl();
    return loadCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoreCommand createStoreCommand()
  {
    StoreCommandImpl storeCommand = new StoreCommandImpl();
    return storeCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExportCommand createExportCommand()
  {
    ExportCommandImpl exportCommand = new ExportCommandImpl();
    return exportCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateCommand createCreateCommand()
  {
    CreateCommandImpl createCommand = new CreateCommandImpl();
    return createCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetCommand createSetCommand()
  {
    SetCommandImpl setCommand = new SetCommandImpl();
    return setCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintCommand createPrintCommand()
  {
    PrintCommandImpl printCommand = new PrintCommandImpl();
    return printCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteCommand createDeleteCommand()
  {
    DeleteCommandImpl deleteCommand = new DeleteCommandImpl();
    return deleteCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddCommand createAddCommand()
  {
    AddCommandImpl addCommand = new AddCommandImpl();
    return addCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RenameCommand createRenameCommand()
  {
    RenameCommandImpl renameCommand = new RenameCommandImpl();
    return renameCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplyCommand createApplyCommand()
  {
    ApplyCommandImpl applyCommand = new ApplyCommandImpl();
    return applyCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplyFilterCommand createApplyFilterCommand()
  {
    ApplyFilterCommandImpl applyFilterCommand = new ApplyFilterCommandImpl();
    return applyFilterCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplyExecCommand createApplyExecCommand()
  {
    ApplyExecCommandImpl applyExecCommand = new ApplyExecCommandImpl();
    return applyExecCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpr createOrExpr()
  {
    OrExprImpl orExpr = new OrExprImpl();
    return orExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddExpr createAddExpr()
  {
    AddExprImpl addExpr = new AddExprImpl();
    return addExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityExpr createEqualityExpr()
  {
    EqualityExprImpl equalityExpr = new EqualityExprImpl();
    return equalityExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparaisonExpr createComparaisonExpr()
  {
    ComparaisonExprImpl comparaisonExpr = new ComparaisonExprImpl();
    return comparaisonExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlusOrMinusExpr createPlusOrMinusExpr()
  {
    PlusOrMinusExprImpl plusOrMinusExpr = new PlusOrMinusExprImpl();
    return plusOrMinusExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOrDivExpr createMulOrDivExpr()
  {
    MulOrDivExprImpl mulOrDivExpr = new MulOrDivExprImpl();
    return mulOrDivExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpr createNotExpr()
  {
    NotExprImpl notExpr = new NotExprImpl();
    return notExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpr createPrimaryExpr()
  {
    PrimaryExprImpl primaryExpr = new PrimaryExprImpl();
    return primaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CsvsExpr createCsvsExpr()
  {
    CsvsExprImpl csvsExpr = new CsvsExprImpl();
    return csvsExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldSelect createFieldSelect()
  {
    FieldSelectImpl fieldSelect = new FieldSelectImpl();
    return fieldSelect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CountExpr createCountExpr()
  {
    CountExprImpl countExpr = new CountExprImpl();
    return countExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LastExpr createLastExpr()
  {
    LastExprImpl lastExpr = new LastExprImpl();
    return lastExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtomicExpr createAtomicExpr()
  {
    AtomicExprImpl atomicExpr = new AtomicExprImpl();
    return atomicExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleConstant createDoubleConstant()
  {
    DoubleConstantImpl doubleConstant = new DoubleConstantImpl();
    return doubleConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableConstant createVariableConstant()
  {
    VariableConstantImpl variableConstant = new VariableConstantImpl();
    return variableConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CsvsPackage getCsvsPackage()
  {
    return (CsvsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CsvsPackage getPackage()
  {
    return CsvsPackage.eINSTANCE;
  }

} //CsvsFactoryImpl
