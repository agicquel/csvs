/*
 * generated by Xtext 2.23.0
 */
package com.agicquel.csvs.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CSVsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_0 = (RuleCall)cCommandsAssignment_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/////////// PROGRAM //////////
		//Program:
		//	LC commands+=Command* LC;
		@Override public ParserRule getRule() { return rule; }
		
		//LC commands+=Command* LC
		public Group getGroup() { return cGroup; }
		
		//LC
		public RuleCall getLCParserRuleCall_0() { return cLCParserRuleCall_0; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_1() { return cCommandsAssignment_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_0() { return cCommandsCommandParserRuleCall_1_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_2() { return cLCParserRuleCall_2; }
	}
	public class LCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.LC");
		private final RuleCall cWSTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LC:
		//	WS?;
		@Override public ParserRule getRule() { return rule; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall() { return cWSTerminalRuleCall; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCsvCommandParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cControlCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCommandAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cCommentCommandParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		/////////// COMMANDS /////////
		//Command:
		//	CsvCommand LC ';' | ControlCommand | {Command} CommentCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//CsvCommand LC ';' | ControlCommand | {Command} CommentCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CsvCommand LC ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//CsvCommand
		public RuleCall getCsvCommandParserRuleCall_0_0() { return cCsvCommandParserRuleCall_0_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_0_1() { return cLCParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//ControlCommand
		public RuleCall getControlCommandParserRuleCall_1() { return cControlCommandParserRuleCall_1; }
		
		//{Command} CommentCommand
		public Group getGroup_2() { return cGroup_2; }
		
		//{Command}
		public Action getCommandAction_2_0() { return cCommandAction_2_0; }
		
		//CommentCommand
		public RuleCall getCommentCommandParserRuleCall_2_1() { return cCommentCommandParserRuleCall_2_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cProgramParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block:
		//	'{' LC Program LC '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' LC Program LC '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//Program
		public RuleCall getProgramParserRuleCall_2() { return cProgramParserRuleCall_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ControlCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.ControlCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ControlCommand:
		//	WhileCommand | IfCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileCommand | IfCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileCommand
		public RuleCall getWhileCommandParserRuleCall_0() { return cWhileCommandParserRuleCall_0; }
		
		//IfCommand
		public RuleCall getIfCommandParserRuleCall_1() { return cIfCommandParserRuleCall_1; }
	}
	public class WhileCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.WhileCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondExpressionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//WhileCommand:
		//	'while' LC '(' LC cond=Expression LC ')' LC body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' LC '(' LC cond=Expression LC ')' LC body=Block
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//cond=Expression
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0() { return cCondExpressionParserRuleCall_4_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//body=Block
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_8_0() { return cBodyBlockParserRuleCall_8_0; }
	}
	public class IfCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.IfCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondExpressionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cThenBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cThenBodyBlockParserRuleCall_8_0 = (RuleCall)cThenBodyAssignment_8.eContents().get(0);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cElseKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cLCParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cElseBodyAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cElseBodyBlockParserRuleCall_10_2_0 = (RuleCall)cElseBodyAssignment_10_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_10_3 = (RuleCall)cGroup_10.eContents().get(3);
		
		//IfCommand:
		//	'if' LC '(' LC cond=Expression LC ')' LC thenBody=Block LC ('else' LC elseBody=Block LC)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' LC '(' LC cond=Expression LC ')' LC thenBody=Block LC ('else' LC elseBody=Block LC)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//cond=Expression
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0() { return cCondExpressionParserRuleCall_4_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//thenBody=Block
		public Assignment getThenBodyAssignment_8() { return cThenBodyAssignment_8; }
		
		//Block
		public RuleCall getThenBodyBlockParserRuleCall_8_0() { return cThenBodyBlockParserRuleCall_8_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }
		
		//('else' LC elseBody=Block LC)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'else'
		public Keyword getElseKeyword_10_0() { return cElseKeyword_10_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_10_1() { return cLCParserRuleCall_10_1; }
		
		//elseBody=Block
		public Assignment getElseBodyAssignment_10_2() { return cElseBodyAssignment_10_2; }
		
		//Block
		public RuleCall getElseBodyBlockParserRuleCall_10_2_0() { return cElseBodyBlockParserRuleCall_10_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_10_3() { return cLCParserRuleCall_10_3; }
	}
	public class CsvCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.CsvCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCreateCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrintCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExportCommandParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDeleteCommandParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAddCommandParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//CsvCommand:
		//	LoadCommand | StoreCommand | CreateCommand | SetCommand | PrintCommand | ExportCommand | DeleteCommand | AddCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//LoadCommand | StoreCommand | CreateCommand | SetCommand | PrintCommand | ExportCommand | DeleteCommand | AddCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoadCommand
		public RuleCall getLoadCommandParserRuleCall_0() { return cLoadCommandParserRuleCall_0; }
		
		//StoreCommand
		public RuleCall getStoreCommandParserRuleCall_1() { return cStoreCommandParserRuleCall_1; }
		
		//CreateCommand
		public RuleCall getCreateCommandParserRuleCall_2() { return cCreateCommandParserRuleCall_2; }
		
		//SetCommand
		public RuleCall getSetCommandParserRuleCall_3() { return cSetCommandParserRuleCall_3; }
		
		//PrintCommand
		public RuleCall getPrintCommandParserRuleCall_4() { return cPrintCommandParserRuleCall_4; }
		
		//ExportCommand
		public RuleCall getExportCommandParserRuleCall_5() { return cExportCommandParserRuleCall_5; }
		
		//DeleteCommand
		public RuleCall getDeleteCommandParserRuleCall_6() { return cDeleteCommandParserRuleCall_6; }
		
		//AddCommand
		public RuleCall getAddCommandParserRuleCall_7() { return cAddCommandParserRuleCall_7; }
	}
	public class LoadCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.LoadCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//LoadCommand:
		//	'load' LC var=ID LC STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'load' LC var=ID LC STRING
		public Group getGroup() { return cGroup; }
		
		//'load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}
	public class StoreCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.StoreCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//StoreCommand:
		//	'store' LC var=ID LC STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'store' LC var=ID LC STRING
		public Group getGroup() { return cGroup; }
		
		//'store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}
	public class CreateCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.CreateCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//CreateCommand:
		//	'create' LC var=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' LC var=ID
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
	}
	public class SetCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.SetCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarExpressionParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//SetCommand:
		//	'set' LC var=Expression LC expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' LC var=Expression LC expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=Expression
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//Expression
		public RuleCall getVarExpressionParserRuleCall_2_0() { return cVarExpressionParserRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}
	public class PrintCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.PrintCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//PrintCommand:
		//	'print' LC expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' LC expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ExportCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.ExportCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ExportCommand:
		//	'export' LC expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'export' LC expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class DeleteCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.DeleteCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//DeleteCommand:
		//	'delete' LC expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' LC expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class AddCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.AddCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOpAlternatives_2_0 = (Alternatives)cOpAssignment_2.eContents().get(0);
		private final Keyword cOpRowKeyword_2_0_0 = (Keyword)cOpAlternatives_2_0.eContents().get(0);
		private final Keyword cOpColKeyword_2_0_1 = (Keyword)cOpAlternatives_2_0.eContents().get(1);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//AddCommand:
		//	'add' LC op=('row' | 'col') LC expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' LC op=('row' | 'col') LC expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//op=('row' | 'col')
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//('row' | 'col')
		public Alternatives getOpAlternatives_2_0() { return cOpAlternatives_2_0; }
		
		//'row'
		public Keyword getOpRowKeyword_2_0_0() { return cOpRowKeyword_2_0_0; }
		
		//'col'
		public Keyword getOpColKeyword_2_0_1() { return cOpColKeyword_2_0_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}
	public class CommentCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.CommentCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cML_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommentCommand:
		//	ML_COMMENT | SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//ML_COMMENT | SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_0() { return cML_COMMENTTerminalRuleCall_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCountExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///////// EXPRESSIONS ////////
		//Expression:
		//	Or | Selector | CountExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//Or | Selector | CountExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//Selector
		public RuleCall getSelectorParserRuleCall_1() { return cSelectorParserRuleCall_1; }
		
		//CountExpr
		public RuleCall getCountExprParserRuleCall_2() { return cCountExprParserRuleCall_2; }
	}
	public class VariableExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.VariableExpr");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermIDTerminalRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//VariableExpr:
		//	term=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//term=ID
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//ID
		public RuleCall getTermIDTerminalRuleCall_0() { return cTermIDTerminalRuleCall_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRowSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColSelectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCellSelectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFieldSelectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Selector:
		//	RowSelect | ColSelect | CellSelect | FieldSelect;
		@Override public ParserRule getRule() { return rule; }
		
		//RowSelect | ColSelect | CellSelect | FieldSelect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RowSelect
		public RuleCall getRowSelectParserRuleCall_0() { return cRowSelectParserRuleCall_0; }
		
		//ColSelect
		public RuleCall getColSelectParserRuleCall_1() { return cColSelectParserRuleCall_1; }
		
		//CellSelect
		public RuleCall getCellSelectParserRuleCall_2() { return cCellSelectParserRuleCall_2; }
		
		//FieldSelect
		public RuleCall getFieldSelectParserRuleCall_3() { return cFieldSelectParserRuleCall_3; }
	}
	public class RowSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.RowSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RowSelect:
		//	'row' LC var=ID LC '(' LC expression=Expression LC ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'row' LC var=ID LC '(' LC expression=Expression LC ')'
		public Group getGroup() { return cGroup; }
		
		//'row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ColSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.ColSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ColSelect:
		//	'col' LC var=ID LC '(' LC expression=Expression LC ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'col' LC var=ID LC '(' LC expression=Expression LC ')'
		public Group getGroup() { return cGroup; }
		
		//'col'
		public Keyword getColKeyword_0() { return cColKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CellSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.CellSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cExpressionRowAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionRowExpressionParserRuleCall_6_0 = (RuleCall)cExpressionRowAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cExpressionColAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cExpressionColExpressionParserRuleCall_10_0 = (RuleCall)cExpressionColAssignment_10.eContents().get(0);
		private final RuleCall cLCParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CellSelect:
		//	'cell' LC var=ID LC '(' LC expressionRow=Expression LC ',' LC expressionCol=Expression LC ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'cell' LC var=ID LC '(' LC expressionRow=Expression LC ',' LC expressionCol=Expression LC ')'
		public Group getGroup() { return cGroup; }
		
		//'cell'
		public Keyword getCellKeyword_0() { return cCellKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//expressionRow=Expression
		public Assignment getExpressionRowAssignment_6() { return cExpressionRowAssignment_6; }
		
		//Expression
		public RuleCall getExpressionRowExpressionParserRuleCall_6_0() { return cExpressionRowExpressionParserRuleCall_6_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }
		
		//expressionCol=Expression
		public Assignment getExpressionColAssignment_10() { return cExpressionColAssignment_10; }
		
		//Expression
		public RuleCall getExpressionColExpressionParserRuleCall_10_0() { return cExpressionColExpressionParserRuleCall_10_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_11() { return cLCParserRuleCall_11; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class FieldSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.FieldSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FieldSelect:
		//	'field' LC var=ID LC '(' LC expression=Expression LC ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'field' LC var=ID LC '(' LC expression=Expression LC ')'
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CountExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.CountExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CountExpr:
		//	'count' LC var=ID LC '(' LC expression=Expression LC ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'count' LC var=ID LC '(' LC expression=Expression LC ')'
		public Group getGroup() { return cGroup; }
		
		//'count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLCParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightAndParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		///*
		// * CREDIT : Lorenzo Bettini
		// * URL : https://github.com/LorenzoBettini/packtpub-xtext-book-2nd-examples/blob/master/org.example.expressions.parent/org.example.expressions/src/org/example/expressions/Expressions.xtext 
		// */ Or Expression:
		//	And ({Or.left=current} LC "||" LC right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} LC "||" LC right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} LC "||" LC right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_2() { return cVerticalLineVerticalLineKeyword_1_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_3() { return cLCParserRuleCall_1_3; }
		
		//right=And
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_4_0() { return cRightAndParserRuleCall_1_4_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLCParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightEqualityParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} LC "&&" LC right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} LC "&&" LC right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} LC "&&" LC right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_2() { return cAmpersandAmpersandKeyword_1_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_3() { return cLCParserRuleCall_1_3; }
		
		//right=Equality
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_4_0() { return cRightEqualityParserRuleCall_1_4_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cOpAlternatives_1_2_0 = (Alternatives)cOpAssignment_1_2.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_2_0_0 = (Keyword)cOpAlternatives_1_2_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_2_0_1 = (Keyword)cOpAlternatives_1_2_0.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightComparisonParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} LC op=("==" | "!=") LC
		//	right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} LC op=("==" | "!=") LC right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} LC op=("==" | "!=") LC right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_2_0() { return cOpAlternatives_1_2_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_2_0_0() { return cOpEqualsSignEqualsSignKeyword_1_2_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_2_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_2_0_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_3() { return cLCParserRuleCall_1_3; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_4_0() { return cRightComparisonParserRuleCall_1_4_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cOpAlternatives_1_2_0 = (Alternatives)cOpAssignment_1_2.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_2_0_0 = (Keyword)cOpAlternatives_1_2_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_2_0_1 = (Keyword)cOpAlternatives_1_2_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_2_0_2 = (Keyword)cOpAlternatives_1_2_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_2_0_3 = (Keyword)cOpAlternatives_1_2_0.eContents().get(3);
		private final RuleCall cLCParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} LC op=(">=" | "<=" | ">" | "<") LC
		//	right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} LC op=(">=" | "<=" | ">" | "<") LC right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} LC op=(">=" | "<=" | ">" | "<") LC right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_2_0() { return cOpAlternatives_1_2_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_2_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_2_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_2_0_1() { return cOpLessThanSignEqualsSignKeyword_1_2_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_2_0_2() { return cOpGreaterThanSignKeyword_1_2_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_2_0_3() { return cOpLessThanSignKeyword_1_2_0_3; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_3() { return cLCParserRuleCall_1_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_4_0() { return cRightPlusOrMinusParserRuleCall_1_4_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final Alternatives cOpAlternatives_1_0_2_0 = (Alternatives)cOpAssignment_1_0_2.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_2_0_0 = (Keyword)cOpAlternatives_1_0_2_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_2_0_1 = (Keyword)cOpAlternatives_1_0_2_0.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulOrDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} LC op=("+" | "-")) LC
		//	right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} LC op=("+" | "-")) LC right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} LC op=("+" | "-")) LC right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} LC op=("+" | "-"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0() { return cPlusLeftAction_1_0_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_0_1() { return cLCParserRuleCall_1_0_1; }
		
		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }
		
		//("+" | "-")
		public Alternatives getOpAlternatives_1_0_2_0() { return cOpAlternatives_1_0_2_0; }
		
		//"+"
		public Keyword getOpPlusSignKeyword_1_0_2_0_0() { return cOpPlusSignKeyword_1_0_2_0_0; }
		
		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_2_0_1() { return cOpHyphenMinusKeyword_1_0_2_0_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_2_0() { return cRightMulOrDivParserRuleCall_1_2_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMulOrDivLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final Alternatives cOpAlternatives_1_0_2_0 = (Alternatives)cOpAssignment_1_0_2.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_2_0_0 = (Keyword)cOpAlternatives_1_0_2_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_2_0_1 = (Keyword)cOpAlternatives_1_0_2_0.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary (({MulOrDiv.left=current} LC op=('*' | '/')) LC
		//	right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({MulOrDiv.left=current} LC op=('*' | '/')) LC right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({MulOrDiv.left=current} LC op=('*' | '/')) LC right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MulOrDiv.left=current} LC op=('*' | '/'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0_0() { return cMulOrDivLeftAction_1_0_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_0_1() { return cLCParserRuleCall_1_0_1; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_2_0() { return cOpAlternatives_1_0_2_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_2_0_0() { return cOpAsteriskKeyword_1_0_2_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_2_0_1() { return cOpSolidusKeyword_1_0_2_0_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cLCParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	'(' LC Expression LC ')' | {Not} "!" expression=Primary | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' LC Expression LC ')' | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' LC Expression LC ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_0_1() { return cLCParserRuleCall_0_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_2() { return cExpressionParserRuleCall_0_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_0_3() { return cLCParserRuleCall_0_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.agicquel.csvs.CSVs.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cVariableExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Atomic Expression:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | VariableExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | VariableExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//VariableExpr
		public RuleCall getVariableExprParserRuleCall_3() { return cVariableExprParserRuleCall_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final LCElements pLC;
	private final CommandElements pCommand;
	private final BlockElements pBlock;
	private final ControlCommandElements pControlCommand;
	private final WhileCommandElements pWhileCommand;
	private final IfCommandElements pIfCommand;
	private final CsvCommandElements pCsvCommand;
	private final LoadCommandElements pLoadCommand;
	private final StoreCommandElements pStoreCommand;
	private final CreateCommandElements pCreateCommand;
	private final SetCommandElements pSetCommand;
	private final PrintCommandElements pPrintCommand;
	private final ExportCommandElements pExportCommand;
	private final DeleteCommandElements pDeleteCommand;
	private final AddCommandElements pAddCommand;
	private final CommentCommandElements pCommentCommand;
	private final ExpressionElements pExpression;
	private final VariableExprElements pVariableExpr;
	private final SelectorElements pSelector;
	private final RowSelectElements pRowSelect;
	private final ColSelectElements pColSelect;
	private final CellSelectElements pCellSelect;
	private final FieldSelectElements pFieldSelect;
	private final CountExprElements pCountExpr;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CSVsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pLC = new LCElements();
		this.pCommand = new CommandElements();
		this.pBlock = new BlockElements();
		this.pControlCommand = new ControlCommandElements();
		this.pWhileCommand = new WhileCommandElements();
		this.pIfCommand = new IfCommandElements();
		this.pCsvCommand = new CsvCommandElements();
		this.pLoadCommand = new LoadCommandElements();
		this.pStoreCommand = new StoreCommandElements();
		this.pCreateCommand = new CreateCommandElements();
		this.pSetCommand = new SetCommandElements();
		this.pPrintCommand = new PrintCommandElements();
		this.pExportCommand = new ExportCommandElements();
		this.pDeleteCommand = new DeleteCommandElements();
		this.pAddCommand = new AddCommandElements();
		this.pCommentCommand = new CommentCommandElements();
		this.pExpression = new ExpressionElements();
		this.pVariableExpr = new VariableExprElements();
		this.pSelector = new SelectorElements();
		this.pRowSelect = new RowSelectElements();
		this.pColSelect = new ColSelectElements();
		this.pCellSelect = new CellSelectElements();
		this.pFieldSelect = new FieldSelectElements();
		this.pCountExpr = new CountExprElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.agicquel.csvs.CSVs".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/////////// PROGRAM //////////
	//Program:
	//	LC commands+=Command* LC;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//LC:
	//	WS?;
	public LCElements getLCAccess() {
		return pLC;
	}
	
	public ParserRule getLCRule() {
		return getLCAccess().getRule();
	}
	
	/////////// COMMANDS /////////
	//Command:
	//	CsvCommand LC ';' | ControlCommand | {Command} CommentCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Block:
	//	'{' LC Program LC '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//ControlCommand:
	//	WhileCommand | IfCommand;
	public ControlCommandElements getControlCommandAccess() {
		return pControlCommand;
	}
	
	public ParserRule getControlCommandRule() {
		return getControlCommandAccess().getRule();
	}
	
	//WhileCommand:
	//	'while' LC '(' LC cond=Expression LC ')' LC body=Block;
	public WhileCommandElements getWhileCommandAccess() {
		return pWhileCommand;
	}
	
	public ParserRule getWhileCommandRule() {
		return getWhileCommandAccess().getRule();
	}
	
	//IfCommand:
	//	'if' LC '(' LC cond=Expression LC ')' LC thenBody=Block LC ('else' LC elseBody=Block LC)?;
	public IfCommandElements getIfCommandAccess() {
		return pIfCommand;
	}
	
	public ParserRule getIfCommandRule() {
		return getIfCommandAccess().getRule();
	}
	
	//CsvCommand:
	//	LoadCommand | StoreCommand | CreateCommand | SetCommand | PrintCommand | ExportCommand | DeleteCommand | AddCommand;
	public CsvCommandElements getCsvCommandAccess() {
		return pCsvCommand;
	}
	
	public ParserRule getCsvCommandRule() {
		return getCsvCommandAccess().getRule();
	}
	
	//LoadCommand:
	//	'load' LC var=ID LC STRING;
	public LoadCommandElements getLoadCommandAccess() {
		return pLoadCommand;
	}
	
	public ParserRule getLoadCommandRule() {
		return getLoadCommandAccess().getRule();
	}
	
	//StoreCommand:
	//	'store' LC var=ID LC STRING;
	public StoreCommandElements getStoreCommandAccess() {
		return pStoreCommand;
	}
	
	public ParserRule getStoreCommandRule() {
		return getStoreCommandAccess().getRule();
	}
	
	//CreateCommand:
	//	'create' LC var=ID;
	public CreateCommandElements getCreateCommandAccess() {
		return pCreateCommand;
	}
	
	public ParserRule getCreateCommandRule() {
		return getCreateCommandAccess().getRule();
	}
	
	//SetCommand:
	//	'set' LC var=Expression LC expression=Expression;
	public SetCommandElements getSetCommandAccess() {
		return pSetCommand;
	}
	
	public ParserRule getSetCommandRule() {
		return getSetCommandAccess().getRule();
	}
	
	//PrintCommand:
	//	'print' LC expression=Expression;
	public PrintCommandElements getPrintCommandAccess() {
		return pPrintCommand;
	}
	
	public ParserRule getPrintCommandRule() {
		return getPrintCommandAccess().getRule();
	}
	
	//ExportCommand:
	//	'export' LC expression=Expression;
	public ExportCommandElements getExportCommandAccess() {
		return pExportCommand;
	}
	
	public ParserRule getExportCommandRule() {
		return getExportCommandAccess().getRule();
	}
	
	//DeleteCommand:
	//	'delete' LC expression=Expression;
	public DeleteCommandElements getDeleteCommandAccess() {
		return pDeleteCommand;
	}
	
	public ParserRule getDeleteCommandRule() {
		return getDeleteCommandAccess().getRule();
	}
	
	//AddCommand:
	//	'add' LC op=('row' | 'col') LC expression=Expression;
	public AddCommandElements getAddCommandAccess() {
		return pAddCommand;
	}
	
	public ParserRule getAddCommandRule() {
		return getAddCommandAccess().getRule();
	}
	
	//CommentCommand:
	//	ML_COMMENT | SL_COMMENT;
	public CommentCommandElements getCommentCommandAccess() {
		return pCommentCommand;
	}
	
	public ParserRule getCommentCommandRule() {
		return getCommentCommandAccess().getRule();
	}
	
	///////// EXPRESSIONS ////////
	//Expression:
	//	Or | Selector | CountExpr;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//VariableExpr:
	//	term=ID;
	public VariableExprElements getVariableExprAccess() {
		return pVariableExpr;
	}
	
	public ParserRule getVariableExprRule() {
		return getVariableExprAccess().getRule();
	}
	
	//Selector:
	//	RowSelect | ColSelect | CellSelect | FieldSelect;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//RowSelect:
	//	'row' LC var=ID LC '(' LC expression=Expression LC ')';
	public RowSelectElements getRowSelectAccess() {
		return pRowSelect;
	}
	
	public ParserRule getRowSelectRule() {
		return getRowSelectAccess().getRule();
	}
	
	//ColSelect:
	//	'col' LC var=ID LC '(' LC expression=Expression LC ')';
	public ColSelectElements getColSelectAccess() {
		return pColSelect;
	}
	
	public ParserRule getColSelectRule() {
		return getColSelectAccess().getRule();
	}
	
	//CellSelect:
	//	'cell' LC var=ID LC '(' LC expressionRow=Expression LC ',' LC expressionCol=Expression LC ')';
	public CellSelectElements getCellSelectAccess() {
		return pCellSelect;
	}
	
	public ParserRule getCellSelectRule() {
		return getCellSelectAccess().getRule();
	}
	
	//FieldSelect:
	//	'field' LC var=ID LC '(' LC expression=Expression LC ')';
	public FieldSelectElements getFieldSelectAccess() {
		return pFieldSelect;
	}
	
	public ParserRule getFieldSelectRule() {
		return getFieldSelectAccess().getRule();
	}
	
	//CountExpr:
	//	'count' LC var=ID LC '(' LC expression=Expression LC ')';
	public CountExprElements getCountExprAccess() {
		return pCountExpr;
	}
	
	public ParserRule getCountExprRule() {
		return getCountExprAccess().getRule();
	}
	
	///*
	// * CREDIT : Lorenzo Bettini
	// * URL : https://github.com/LorenzoBettini/packtpub-xtext-book-2nd-examples/blob/master/org.example.expressions.parent/org.example.expressions/src/org/example/expressions/Expressions.xtext 
	// */ Or Expression:
	//	And ({Or.left=current} LC "||" LC right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} LC "&&" LC right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} LC op=("==" | "!=") LC
	//	right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} LC op=(">=" | "<=" | ">" | "<") LC
	//	right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} LC op=("+" | "-")) LC
	//	right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary (({MulOrDiv.left=current} LC op=('*' | '/')) LC
	//	right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' LC Expression LC ')' | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | VariableExpr;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
